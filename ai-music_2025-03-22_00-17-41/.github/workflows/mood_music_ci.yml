name: Mood Music CI/CD

on:
  push:
    branches: [main]
    paths:
      - "backend/mood_based_music/**"
      - "frontend/src/components/mood-music/**"
      - "frontend/src/hooks/use-mood-*.ts"
  pull_request:
    branches: [main]
    paths:
      - "backend/mood_based_music/**"
      - "frontend/src/components/mood-music/**"
      - "frontend/src/hooks/use-mood-*.ts"

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -r backend/requirements-dev.txt

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm install

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SETTINGS_MODULE: config.settings.test
        run: |
          cd backend
          python manage.py test mood_based_music.tests --parallel

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test -- --coverage mood-music

      - name: Run load tests
        run: |
          cd backend
          locust -f mood_based_music/tests/test_load.py --headless -u 50 -r 10 --run-time 1m

      - name: Upload test coverage
        uses: codecov/codecov-action@v2

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          cd frontend
          npm install

      - name: Run Python linters
        run: |
          flake8 backend/mood_based_music
          black --check backend/mood_based_music
          isort --check-only backend/mood_based_music

      - name: Run TypeScript linters
        run: |
          cd frontend
          npm run lint
          npm run type-check

  deploy:
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and push Docker images
        run: |
          docker build -t mood-music-backend ./backend
          docker build -t mood-music-frontend ./frontend
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker tag mood-music-backend:latest ${{ secrets.ECR_REGISTRY }}/mood-music-backend:latest
          docker tag mood-music-frontend:latest ${{ secrets.ECR_REGISTRY }}/mood-music-frontend:latest
          docker push ${{ secrets.ECR_REGISTRY }}/mood-music-backend:latest
          docker push ${{ secrets.ECR_REGISTRY }}/mood-music-frontend:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster mood-music --service backend --force-new-deployment
          aws ecs update-service --cluster mood-music --service frontend --force-new-deployment
