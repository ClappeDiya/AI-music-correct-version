# Generated by Django 4.2.9 on 2025-02-12 17:51

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the achievement.', primary_key=True, serialize=False, verbose_name='Achievement ID')),
                ('name', models.TextField(help_text='Name of the achievement.', verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Description of the achievement.', null=True, verbose_name='Description')),
                ('criteria', models.JSONField(blank=True, help_text='Criteria for earning the achievement, e.g., course completion, quiz score.', null=True, verbose_name='Criteria')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the achievement was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
            },
        ),
        migrations.CreateModel(
            name='AdaptiveCurriculumSettings',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the adaptive curriculum settings.', primary_key=True, serialize=False, verbose_name='Adaptive Curriculum Settings ID')),
                ('configuration', models.JSONField(blank=True, help_text='Preferred challenge level, adaptive rules, etc.', null=True, verbose_name='Configuration')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the settings were last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Adaptive Curriculum Settings',
                'verbose_name_plural': 'Adaptive Curriculum Settings',
            },
        ),
        migrations.CreateModel(
            name='AIAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('privacy_level', models.CharField(choices=[('private', 'Private'), ('instructor', 'Instructor Only'), ('public', 'Public')], default='private', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_text', models.TextField()),
                ('strengths', models.JSONField(default=list)),
                ('improvements', models.JSONField(default=list)),
                ('suggestions', models.JSONField(default=list)),
            ],
        ),
        migrations.CreateModel(
            name='AIFeedbackData',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the AI feedback data.', primary_key=True, serialize=False, verbose_name='AI Feedback ID')),
                ('feedback', models.JSONField(blank=True, help_text='AI-generated feedback, e.g., suggestions, score analysis.', null=True, verbose_name='Feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the feedback was generated.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'AI Feedback Data',
                'verbose_name_plural': 'AI Feedback Data',
            },
        ),
        migrations.CreateModel(
            name='AnalysisProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Progress Percentage')),
                ('current_step', models.CharField(blank=True, max_length=100, null=True, verbose_name='Current Step')),
                ('estimated_time_remaining', models.IntegerField(blank=True, null=True, verbose_name='Estimated Time Remaining (seconds)')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Analysis Progress',
                'verbose_name_plural': 'Analysis Progress',
            },
        ),
        migrations.CreateModel(
            name='AnalyticsEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=50)),
                ('session_id', models.CharField(max_length=255)),
                ('data', models.JSONField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'analytics_events',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the course.', primary_key=True, serialize=False, verbose_name='Course ID')),
                ('course_name', models.TextField(help_text='Name of the course.', verbose_name='Course Name')),
                ('description', models.TextField(blank=True, help_text='Description of the course.', null=True, verbose_name='Description')),
                ('metadata', models.JSONField(blank=True, help_text='Additional metadata about the course, e.g., level, duration, tags.', null=True, verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the course was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='Educator',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the educator.', primary_key=True, serialize=False, verbose_name='Educator ID')),
                ('name', models.TextField(help_text='Name of the educator.', verbose_name='Name')),
                ('bio', models.TextField(blank=True, help_text='Biography of the educator.', null=True, verbose_name='Bio')),
                ('specialization', models.TextField(help_text="Area of expertise of the educator, e.g., 'sound design', 'music theory'.", verbose_name='Specialization')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the educator was added to the system.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Educator',
                'verbose_name_plural': 'Educators',
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the learning path.', primary_key=True, serialize=False, verbose_name='Learning Path ID')),
                ('path_name', models.TextField(help_text='Name of the learning path.', verbose_name='Path Name')),
                ('description', models.TextField(blank=True, help_text='Description of the learning path.', null=True, verbose_name='Description')),
                ('structure', models.JSONField(blank=True, help_text='Structure of the learning path, e.g., steps of courses and lessons.', null=True, verbose_name='Structure')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the learning path was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Learning Path',
                'verbose_name_plural': 'Learning Paths',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the lesson.', primary_key=True, serialize=False, verbose_name='Lesson ID')),
                ('lesson_title', models.TextField(help_text='Title of the lesson.', verbose_name='Lesson Title')),
                ('content', models.JSONField(blank=True, help_text='Structured lesson data, links to videos, transcripts.', null=True, verbose_name='Content')),
                ('order_in_course', models.IntegerField(help_text='Order of the lesson within the course.', verbose_name='Order in Course')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the lesson was created.', verbose_name='Created At')),
                ('course', models.ForeignKey(help_text='The course this lesson belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='music_education.course', verbose_name='Course')),
            ],
            options={
                'verbose_name': 'Lesson',
                'verbose_name_plural': 'Lessons',
                'ordering': ['order_in_course'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the quiz.', primary_key=True, serialize=False, verbose_name='Quiz ID')),
                ('quiz_data', models.JSONField(blank=True, help_text='Quiz questions and answers.', null=True, verbose_name='Quiz Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the quiz was created.', verbose_name='Created At')),
                ('lesson', models.ForeignKey(help_text='The lesson this quiz is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='music_education.lesson', verbose_name='Lesson')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
            },
        ),
        migrations.CreateModel(
            name='WatchHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Watch History ID')),
                ('section', models.IntegerField(help_text='Section identifier within the lesson', verbose_name='Section')),
                ('progress', models.FloatField(help_text='Progress percentage for this section', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Progress')),
                ('timestamp', models.DateTimeField(help_text='When this progress was recorded', verbose_name='Timestamp')),
                ('last_position', models.IntegerField(default=0, help_text='Last playback position in seconds', verbose_name='Last Position')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watch_history', to='music_education.lesson', verbose_name='Lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watch_history', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Watch History',
                'verbose_name_plural': 'Watch Histories',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='VideoNote',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Video Note ID')),
                ('timestamp', models.IntegerField(help_text='Timestamp in seconds where the note was added', verbose_name='Timestamp')),
                ('text', models.TextField(verbose_name='Note Text')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_notes', to='music_education.lesson', verbose_name='Lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_notes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Video Note',
                'verbose_name_plural': 'Video Notes',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='VideoAnalytics',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Video Analytics ID')),
                ('total_watch_time', models.IntegerField(default=0, help_text='Total time watched in seconds', verbose_name='Total Watch Time')),
                ('completion_rate', models.FloatField(default=0.0, help_text='Percentage of users who completed the video', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Completion Rate')),
                ('average_engagement', models.FloatField(default=0.0, help_text='Average engagement score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Average Engagement')),
                ('most_watched_segments', models.JSONField(default=list, help_text='List of most watched video segments', verbose_name='Most Watched Segments')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_analytics', to='music_education.lesson', verbose_name='Lesson')),
            ],
            options={
                'verbose_name': 'Video Analytics',
                'verbose_name_plural': 'Video Analytics',
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the user progress record.', primary_key=True, serialize=False, verbose_name='User Progress ID')),
                ('completion_status', models.TextField(default='in_progress', help_text="Status of completion, e.g., 'in_progress', 'completed'.", verbose_name='Completion Status')),
                ('progress', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of completion.', max_digits=5, null=True, verbose_name='Progress')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the progress was last updated.', verbose_name='Updated At')),
                ('course', models.ForeignKey(blank=True, help_text='The course the user is progressing through.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='music_education.course', verbose_name='Course')),
                ('lesson', models.ForeignKey(blank=True, help_text='The lesson the user is progressing through.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='music_education.lesson', verbose_name='Lesson')),
                ('user', models.ForeignKey(help_text='The user whose progress is being tracked.', on_delete=django.db.models.deletion.CASCADE, related_name='progress', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Progress',
                'verbose_name_plural': 'User Progress Records',
            },
        ),
        migrations.CreateModel(
            name='UserMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=255)),
                ('session_duration', models.IntegerField()),
                ('completed_items', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), default=list, size=None)),
                ('interactions', models.JSONField()),
                ('progress', models.FloatField()),
                ('performance', models.JSONField(null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_metrics',
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=20)),
                ('target_id', models.CharField(max_length=255)),
                ('rating', models.IntegerField()),
                ('comment', models.TextField(null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, size=None)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('sentiment', models.JSONField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_feedback',
            },
        ),
        migrations.CreateModel(
            name='UserEngagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('last_active', models.DateTimeField()),
                ('metrics', models.JSONField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='engagement', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_engagement',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the user achievement record.', primary_key=True, serialize=False, verbose_name='User Achievement ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the achievement was earned.', verbose_name='Earned At')),
                ('achievement', models.ForeignKey(help_text='The achievement that was earned.', on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='music_education.achievement', verbose_name='Achievement')),
                ('user', models.ForeignKey(help_text='The user who earned the achievement.', on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the quiz attempt.', primary_key=True, serialize=False, verbose_name='Quiz Attempt ID')),
                ('attempt_data', models.JSONField(blank=True, help_text="User's answers for the quiz.", null=True, verbose_name='Attempt Data')),
                ('score', models.DecimalField(blank=True, decimal_places=2, help_text='Score of the quiz attempt.', max_digits=5, null=True, verbose_name='Score')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the quiz attempt was made.', verbose_name='Created At')),
                ('quiz', models.ForeignKey(help_text='The quiz this attempt is for.', on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='music_education.quiz', verbose_name='Quiz')),
                ('user', models.ForeignKey(help_text='The user who made this attempt.', on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Quiz Attempt',
                'verbose_name_plural': 'Quiz Attempts',
            },
        ),
        migrations.CreateModel(
            name='PerformanceRecording',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the performance recording.', primary_key=True, serialize=False, verbose_name='Performance Recording ID')),
                ('file_url', models.TextField(help_text='URL of the audio file.', verbose_name='File URL')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the recording was submitted.', verbose_name='Submitted At')),
                ('lesson', models.ForeignKey(blank=True, help_text='Optional link to a specific lesson.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performance_recordings', to='music_education.lesson', verbose_name='Lesson')),
                ('user', models.ForeignKey(help_text='The user who submitted the recording.', on_delete=django.db.models.deletion.CASCADE, related_name='performance_recordings', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Performance Recording',
                'verbose_name_plural': 'Performance Recordings',
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('rhythm', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('expression', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('feedback', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='music_education.aifeedback')),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceAnalysis',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the performance analysis.', primary_key=True, serialize=False, verbose_name='Performance Analysis ID')),
                ('analysis_data', models.JSONField(blank=True, help_text='Transcription, pitch accuracy, timing variance, etc.', null=True, verbose_name='Analysis Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the analysis was created.', verbose_name='Created At')),
                ('recording', models.ForeignKey(help_text='The performance recording this analysis is for.', on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='music_education.performancerecording', verbose_name='Recording')),
            ],
            options={
                'verbose_name': 'Performance Analysis',
                'verbose_name_plural': 'Performance Analyses',
            },
        ),
        migrations.CreateModel(
            name='PeerTutoringMatch',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the peer tutoring match.', primary_key=True, serialize=False, verbose_name='Peer Tutoring Match ID')),
                ('match_metadata', models.JSONField(blank=True, help_text='Shared goals, schedule, etc.', null=True, verbose_name='Match Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the match was created.', verbose_name='Created At')),
                ('user_1', models.ForeignKey(help_text='The first user in the match.', on_delete=django.db.models.deletion.CASCADE, related_name='peer_tutoring_matches_1', to=settings.AUTH_USER_MODEL, verbose_name='User 1')),
                ('user_2', models.ForeignKey(help_text='The second user in the match.', on_delete=django.db.models.deletion.CASCADE, related_name='peer_tutoring_matches_2', to=settings.AUTH_USER_MODEL, verbose_name='User 2')),
            ],
            options={
                'verbose_name': 'Peer Tutoring Match',
                'verbose_name_plural': 'Peer Tutoring Matches',
            },
        ),
        migrations.CreateModel(
            name='MentoringSession',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the mentoring session.', primary_key=True, serialize=False, verbose_name='Mentoring Session ID')),
                ('session_data', models.JSONField(blank=True, help_text='Data about the mentoring session, e.g., scheduled time, topics, notes.', null=True, verbose_name='Session Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the mentoring session was created.', verbose_name='Created At')),
                ('educator', models.ForeignKey(help_text='The educator leading the mentoring session.', on_delete=django.db.models.deletion.RESTRICT, related_name='mentoring_sessions', to='music_education.educator', verbose_name='Educator')),
                ('user', models.ForeignKey(help_text='The user participating in the mentoring session.', on_delete=django.db.models.deletion.CASCADE, related_name='mentoring_sessions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Mentoring Session',
                'verbose_name_plural': 'Mentoring Sessions',
            },
        ),
        migrations.CreateModel(
            name='ExpertCourse',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('version', models.CharField(max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], max_length=20)),
                ('sections', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(null=True)),
                ('expert_profile', models.JSONField()),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'expert_courses',
            },
        ),
        migrations.CreateModel(
            name='DetailedAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pitch_accuracy', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('pitch_consistency', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('pitch_range', models.CharField(max_length=50)),
                ('rhythm_timing', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('rhythm_steadiness', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('rhythm_complexity', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('expression_dynamics', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('expression_articulation', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('expression_phrasing', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('intonation', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('breathing', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('posture', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('feedback', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detailed_analysis', to='music_education.aifeedback')),
            ],
        ),
        migrations.CreateModel(
            name='CourseVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=20)),
                ('content', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('changes', models.JSONField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='music_education.expertcourse')),
            ],
            options={
                'db_table': 'course_versions',
            },
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['course_name'], name='idx_c_name'),
        ),
        migrations.AddField(
            model_name='analyticsevent',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics_events', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='analysisprogress',
            name='analysis',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='music_education.aianalysis'),
        ),
        migrations.AddField(
            model_name='aifeedbackdata',
            name='lesson',
            field=models.ForeignKey(blank=True, help_text='The lesson this feedback is for.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_feedback', to='music_education.lesson', verbose_name='Lesson'),
        ),
        migrations.AddField(
            model_name='aifeedbackdata',
            name='quiz_attempt',
            field=models.ForeignKey(blank=True, help_text='The quiz attempt this feedback is for.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_feedback', to='music_education.quizattempt', verbose_name='Quiz Attempt'),
        ),
        migrations.AddField(
            model_name='aifeedbackdata',
            name='user',
            field=models.ForeignKey(help_text='The user who received this feedback.', on_delete=django.db.models.deletion.CASCADE, related_name='ai_feedback', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='aifeedback',
            name='analysis',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='music_education.aianalysis'),
        ),
        migrations.AddField(
            model_name='aianalysis',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_analyses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='adaptivecurriculumsettings',
            name='user',
            field=models.OneToOneField(help_text='The user these settings apply to.', on_delete=django.db.models.deletion.CASCADE, related_name='adaptive_settings', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddIndex(
            model_name='watchhistory',
            index=models.Index(fields=['user', 'lesson'], name='idx_wh_user_lesson'),
        ),
        migrations.AddIndex(
            model_name='watchhistory',
            index=models.Index(fields=['timestamp'], name='idx_wh_timestamp'),
        ),
        migrations.AddIndex(
            model_name='videonote',
            index=models.Index(fields=['user', 'lesson'], name='idx_vn_user_lesson'),
        ),
        migrations.AddIndex(
            model_name='videonote',
            index=models.Index(fields=['timestamp'], name='idx_vn_timestamp'),
        ),
        migrations.AddIndex(
            model_name='videoanalytics',
            index=models.Index(fields=['lesson'], name='idx_va_lesson'),
        ),
        migrations.AddIndex(
            model_name='videoanalytics',
            index=models.Index(fields=['updated_at'], name='idx_va_updated'),
        ),
        migrations.AddIndex(
            model_name='userprogress',
            index=models.Index(fields=['user'], name='idx_up_uid'),
        ),
        migrations.AddIndex(
            model_name='usermetrics',
            index=models.Index(fields=['user', 'timestamp'], name='user_metric_user_id_3007a4_idx'),
        ),
        migrations.AddIndex(
            model_name='userfeedback',
            index=models.Index(fields=['user', 'type'], name='user_feedba_user_id_dda65b_idx'),
        ),
        migrations.AddIndex(
            model_name='userfeedback',
            index=models.Index(fields=['target_id'], name='user_feedba_target__de8042_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievement',
            index=models.Index(fields=['user'], name='idx_ua_uid'),
        ),
        migrations.AlterUniqueTogether(
            name='userachievement',
            unique_together={('user', 'achievement')},
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['user'], name='idx_qa_uid'),
        ),
        migrations.AddIndex(
            model_name='performancerecording',
            index=models.Index(fields=['user'], name='idx_pr_uid'),
        ),
        migrations.AddIndex(
            model_name='performanceanalysis',
            index=models.Index(fields=['recording'], name='idx_pa_rid'),
        ),
        migrations.AddIndex(
            model_name='peertutoringmatch',
            index=models.Index(fields=['user_1'], name='idx_ptm_u1id'),
        ),
        migrations.AddConstraint(
            model_name='peertutoringmatch',
            constraint=models.CheckConstraint(check=models.Q(('user_1', models.F('user_2')), _negated=True), name='check_different_users'),
        ),
        migrations.AddConstraint(
            model_name='peertutoringmatch',
            constraint=models.UniqueConstraint(fields=('user_1', 'user_2'), name='unique_peer_match'),
        ),
        migrations.AddIndex(
            model_name='mentoringsession',
            index=models.Index(fields=['user'], name='idx_ms_uid'),
        ),
        migrations.AddIndex(
            model_name='expertcourse',
            index=models.Index(fields=['expert', 'status'], name='expert_cour_expert__89d7f2_idx'),
        ),
        migrations.AddIndex(
            model_name='expertcourse',
            index=models.Index(fields=['version'], name='expert_cour_version_bd081e_idx'),
        ),
        migrations.AddIndex(
            model_name='detailedanalysis',
            index=models.Index(fields=['feedback'], name='music_educa_feedbac_89b83b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courseversion',
            unique_together={('course', 'version')},
        ),
        migrations.AddIndex(
            model_name='analyticsevent',
            index=models.Index(fields=['event_type'], name='analytics_e_event_t_7fd62a_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsevent',
            index=models.Index(fields=['user'], name='analytics_e_user_id_f525be_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsevent',
            index=models.Index(fields=['timestamp'], name='analytics_e_timesta_47536d_idx'),
        ),
        migrations.AddIndex(
            model_name='analysisprogress',
            index=models.Index(fields=['updated_at'], name='music_educa_updated_59f980_idx'),
        ),
        migrations.AddIndex(
            model_name='aifeedback',
            index=models.Index(fields=['analysis'], name='music_educa_analysi_acae01_idx'),
        ),
        migrations.AddIndex(
            model_name='aianalysis',
            index=models.Index(fields=['user', '-created_at'], name='music_educa_user_id_ea6e23_idx'),
        ),
        migrations.AddIndex(
            model_name='aianalysis',
            index=models.Index(fields=['status'], name='music_educa_status_741c7f_idx'),
        ),
        migrations.AddIndex(
            model_name='adaptivecurriculumsettings',
            index=models.Index(fields=['user'], name='idx_acs_uid'),
        ),
    ]
