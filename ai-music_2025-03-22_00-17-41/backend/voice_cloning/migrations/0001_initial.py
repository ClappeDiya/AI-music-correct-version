# Generated by Django 4.2.9 on 2025-02-12 17:52

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('user_management', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Emotion',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('label', models.TextField(help_text="Unique label for the emotion (e.g., 'happy', 'sad').", unique=True, verbose_name='Emotion Label')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the emotion was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Emotion',
                'verbose_name_plural': 'Emotions',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.TextField(help_text="Unique language code (e.g., 'en-US', 'fr-FR').", unique=True, verbose_name='Language Code')),
                ('name', models.TextField(help_text='Name of the language.', verbose_name='Language Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the language was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='VoiceCloningSettings',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('setting_key', models.TextField(help_text='Unique key for the setting.', unique=True, verbose_name='Setting Key')),
                ('setting_value', models.TextField(help_text='Value of the setting.', verbose_name='Setting Value')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the setting was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the setting was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Voice Cloning Setting',
                'verbose_name_plural': 'Voice Cloning Settings',
            },
        ),
        migrations.CreateModel(
            name='VoiceModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('settings', models.JSONField(default=dict)),
                ('emotion_profile', models.JSONField(default=dict)),
                ('language_capabilities', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voice_models', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Voice Model',
                'verbose_name_plural': 'Voice Models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VoiceRecordingSession',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('session_name', models.TextField(blank=True, help_text='Optional name for the recording session.', null=True, verbose_name='Session Name')),
                ('instructions_shown', models.BooleanField(default=True, help_text='Indicates if instructions were shown to the user during the session.', verbose_name='Instructions Shown')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the session was created.', verbose_name='Created At')),
                ('ended_at', models.DateTimeField(blank=True, help_text='Timestamp when the session ended.', null=True, verbose_name='Ended At')),
                ('language_code', models.TextField(blank=True, help_text='Language code for the recording session.', null=True, verbose_name='Language Code')),
                ('user', models.ForeignKey(help_text='User who created the recording session.', on_delete=django.db.models.deletion.CASCADE, related_name='voice_recording_sessions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Voice Recording Session',
                'verbose_name_plural': 'Voice Recording Sessions',
            },
        ),
        migrations.CreateModel(
            name='VoiceModelVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_number', models.IntegerField()),
                ('changes', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='voice_cloning.voicemodel')),
            ],
            options={
                'ordering': ['-version_number'],
            },
        ),
        migrations.CreateModel(
            name='VoiceModelUsageLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('used_in_context', models.TextField(help_text='Context in which the voice model was used (e.g., generated track, collaboration project).', verbose_name='Used In Context')),
                ('details', models.JSONField(blank=True, help_text='JSON object containing details about the usage (e.g., track ID, timestamp, parameters).', null=True, verbose_name='Details')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the usage was logged.', verbose_name='Created At')),
                ('voice_model', models.ForeignKey(help_text='Voice model that was used.', on_delete=django.db.models.deletion.CASCADE, related_name='voice_model_usage_logs', to='voice_cloning.voicemodel', verbose_name='Voice Model')),
            ],
            options={
                'verbose_name': 'Voice Model Usage Log',
                'verbose_name_plural': 'Voice Model Usage Logs',
            },
        ),
        migrations.CreateModel(
            name='VoiceModelShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(choices=[('view', 'View'), ('edit', 'Edit'), ('admin', 'Admin')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='voice_cloning.voicemodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VoiceModelPermission',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('consent_granted_at', models.DateTimeField(blank=True, help_text='Timestamp when consent was granted.', null=True, verbose_name='Consent Granted At')),
                ('consent_revoked_at', models.DateTimeField(blank=True, help_text='Timestamp when consent was revoked.', null=True, verbose_name='Consent Revoked At')),
                ('usage_scope', models.JSONField(blank=True, help_text='JSON object defining the scope of usage (e.g., allowed in personal tracks only, commercial use).', null=True, verbose_name='Usage Scope')),
                ('user', models.ForeignKey(help_text='User who granted the permissions.', on_delete=django.db.models.deletion.CASCADE, related_name='voice_model_permissions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('voice_model', models.ForeignKey(help_text='Voice model for which permissions are granted.', on_delete=django.db.models.deletion.CASCADE, related_name='voice_model_permissions', to='voice_cloning.voicemodel', verbose_name='Voice Model')),
            ],
            options={
                'verbose_name': 'Voice Model Permission',
                'verbose_name_plural': 'Voice Model Permissions',
            },
        ),
        migrations.CreateModel(
            name='VoiceModelConsentScope',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('scope_data', models.JSONField(blank=True, help_text='JSON object defining the scope of usage (e.g., allowed usage, restricted projects).', null=True, verbose_name='Scope Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the consent scope was created.', verbose_name='Created At')),
                ('voice_model', models.ForeignKey(help_text='Voice model for which consent scope is defined.', on_delete=django.db.models.deletion.CASCADE, related_name='voice_model_consent_scopes', to='voice_cloning.voicemodel', verbose_name='Voice Model')),
            ],
            options={
                'verbose_name': 'Voice Model Consent Scope',
                'verbose_name_plural': 'Voice Model Consent Scopes',
            },
        ),
        migrations.CreateModel(
            name='VoiceModelAdaptiveEvent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_type', models.TextField(help_text="Type of adaptive event (e.g., 'pitch_adjust', 'emotion_shift').", verbose_name='Event Type')),
                ('event_details', models.JSONField(blank=True, help_text='JSON object containing details about the event (e.g., new emotion, pitch shift).', null=True, verbose_name='Event Details')),
                ('triggered_by', models.TextField(help_text="Source that triggered the event (e.g., 'biofeedback', 'user_command', 'AI_autonomous').", verbose_name='Triggered By')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the event was logged.', verbose_name='Created At')),
                ('voice_model', models.ForeignKey(help_text='Voice model that was adapted.', on_delete=django.db.models.deletion.CASCADE, related_name='voice_model_adaptive_events', to='voice_cloning.voicemodel', verbose_name='Voice Model')),
            ],
            options={
                'verbose_name': 'Voice Model Adaptive Event',
                'verbose_name_plural': 'Voice Model Adaptive Events',
            },
        ),
        migrations.CreateModel(
            name='VoiceAnalysis',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('progress_percentage', models.IntegerField(default=0)),
                ('current_step', models.CharField(blank=True, max_length=50, null=True)),
                ('estimated_time_remaining', models.IntegerField(blank=True, null=True)),
                ('results', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_management.user')),
                ('voice_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='voice_cloning.voicemodel')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VoiceSample',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('file_url', models.TextField(help_text='Secure storage location of the voice sample file.', verbose_name='File URL')),
                ('metadata', models.JSONField(blank=True, help_text='Metadata about the voice sample (e.g., sample rate, duration, format).', null=True, verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the sample was created.', verbose_name='Created At')),
                ('emotion_tags', models.JSONField(blank=True, help_text='JSON object containing detected emotions in the sample.', null=True, verbose_name='Emotion Tags')),
                ('session', models.ForeignKey(help_text='Recording session this sample belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='voice_samples', to='voice_cloning.voicerecordingsession', verbose_name='Session')),
            ],
            options={
                'verbose_name': 'Voice Sample',
                'verbose_name_plural': 'Voice Samples',
                'indexes': [models.Index(fields=['metadata'], name='idx_voice_samples_metadata'), models.Index(fields=['emotion_tags'], name='idx_voice_samples_emotion_tags')],
            },
        ),
        migrations.AddIndex(
            model_name='voicerecordingsession',
            index=models.Index(fields=['user'], name='idx_voice_sessions_user'),
        ),
        migrations.AlterUniqueTogether(
            name='voicemodelversion',
            unique_together={('model', 'version_number')},
        ),
        migrations.AlterUniqueTogether(
            name='voicemodelshare',
            unique_together={('model', 'user')},
        ),
        migrations.AddIndex(
            model_name='voicemodelpermission',
            index=models.Index(fields=['user'], name='idx_voice_perms_user'),
        ),
        migrations.AddIndex(
            model_name='voicemodelpermission',
            index=models.Index(fields=['usage_scope'], name='idx_voice_perms_scope'),
        ),
        migrations.AddIndex(
            model_name='voicemodelconsentscope',
            index=models.Index(fields=['voice_model'], name='idx_voice_consent_model'),
        ),
        migrations.AddIndex(
            model_name='voicemodelconsentscope',
            index=models.Index(fields=['scope_data'], name='idx_voice_consent_data'),
        ),
        migrations.AddIndex(
            model_name='voicemodeladaptiveevent',
            index=models.Index(fields=['voice_model'], name='idx_voice_adaptive'),
        ),
    ]
