# Generated by Django 4.2.9 on 2025-02-12 21:16

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('ai_dj', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BiometricDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('device_type', models.CharField(max_length=50)),
                ('manufacturer', models.CharField(max_length=100)),
                ('model_number', models.CharField(max_length=100)),
                ('firmware_version', models.CharField(max_length=50)),
                ('last_calibration', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Biometric Device',
                'verbose_name_plural': 'Biometric Devices',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WearableDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('garmin', 'Garmin'), ('apple', 'Apple Watch'), ('fitbit', 'Fitbit')], max_length=20)),
                ('status', models.CharField(choices=[('available', 'Available'), ('connected', 'Connected'), ('disconnected', 'Disconnected'), ('error', 'Error')], default='available', max_length=20)),
                ('last_connected', models.DateTimeField(blank=True, null=True)),
                ('battery_level', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='GroupEmotionalState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('median_heart_rate', models.FloatField(null=True)),
                ('median_energy_level', models.FloatField(null=True)),
                ('median_stress_level', models.FloatField(null=True)),
                ('dominant_emotion', models.CharField(max_length=50)),
                ('emotion_distribution', models.JSONField(default=dict)),
                ('consensus_strength', models.FloatField(help_text='How strongly the group agrees on the emotional state (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('participant_count', models.IntegerField(default=0)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_dj.aidjsession')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BiometricReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reading_type', models.CharField(choices=[('heart_rate', 'Heart Rate'), ('blood_pressure', 'Blood Pressure'), ('temperature', 'Temperature'), ('gsr', 'Galvanic Skin Response'), ('eeg', 'EEG'), ('movement', 'Movement')], max_length=50)),
                ('value', models.JSONField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('confidence_score', models.FloatField(default=1.0)),
                ('metadata', models.JSONField(default=dict)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biometrics.biometricdevice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Biometric Reading',
                'verbose_name_plural': 'Biometric Readings',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BiometricProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baseline_metrics', models.JSONField(default=dict)),
                ('preferences', models.JSONField(default=dict)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Biometric Profile',
                'verbose_name_plural': 'Biometric Profiles',
                'ordering': ['user'],
            },
        ),
        migrations.CreateModel(
            name='BiometricPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_heart_rate', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(180)])),
                ('target_energy_level', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('stress_management', models.BooleanField(default=True)),
                ('mood_matching', models.BooleanField(default=True)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ai_dj.aidjsession')),
            ],
        ),
        migrations.CreateModel(
            name='BiometricFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy_rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('comfort_rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('comments', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('reading', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biometrics.biometricreading')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Biometric Feedback',
                'verbose_name_plural': 'Biometric Feedbacks',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BiometricData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('heart_rate', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(250)])),
                ('stress_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('energy_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('movement', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('mood', models.CharField(choices=[('energetic', 'Energetic'), ('calm', 'Calm'), ('stressed', 'Stressed'), ('focused', 'Focused')], max_length=20)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biometrics.wearabledevice')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_dj.aidjsession')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BiometricCalibration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calibration_date', models.DateTimeField()),
                ('next_calibration', models.DateTimeField()),
                ('calibration_data', models.JSONField(default=dict)),
                ('notes', models.TextField(blank=True)),
                ('success', models.BooleanField(default=True)),
                ('calibrated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biometrics.biometricdevice')),
            ],
            options={
                'verbose_name': 'Biometric Calibration',
                'verbose_name_plural': 'Biometric Calibrations',
                'ordering': ['-calibration_date'],
            },
        ),
        migrations.CreateModel(
            name='BiometricAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('acknowledged', models.BooleanField(default=False)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('reading', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biometrics.biometricreading')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Biometric Alert',
                'verbose_name_plural': 'Biometric Alerts',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EmotionalPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emotion_weight', models.FloatField(default=1.0, help_text="How much this user's emotions should influence the group (0-2)", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2.0)])),
                ('prefer_emotional_sync', models.BooleanField(default=True, help_text="Whether to try matching the group's emotional state")),
                ('emotion_influence_radius', models.FloatField(default=0.5, help_text='How much to be influenced by nearby participants in VR (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_dj.aidjsession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'session')},
            },
        ),
        migrations.AddIndex(
            model_name='biometricreading',
            index=models.Index(fields=['user', 'reading_type', 'timestamp'], name='biometrics__user_id_062b7e_idx'),
        ),
    ]
