# Generated by Django 4.2.9 on 2025-02-12 21:16

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severity', models.CharField(choices=[('info', 'Information'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CacheableTrackTransition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_track', models.CharField(help_text='Source track identifier', max_length=255)),
                ('target_track', models.CharField(help_text='Target track identifier', max_length=255)),
                ('transition_params', models.JSONField(help_text='Parameters used for the transition')),
                ('cache_key', models.CharField(help_text='Unique cache key for this transition', max_length=255, unique=True)),
                ('hit_count', models.IntegerField(default=0, help_text='Number of times this transition has been requested', validators=[django.core.validators.MinValueValidator(0)])),
                ('last_accessed', models.DateTimeField(auto_now=True, help_text='Last time this transition was accessed')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this transition was first cached')),
            ],
            options={
                'verbose_name': 'Cacheable Track Transition',
                'verbose_name_plural': 'Cacheable Track Transitions',
                'db_table': 'monitoring_track_transition',
                'ordering': ['-hit_count', '-last_accessed'],
            },
        ),
        migrations.CreateModel(
            name='DeploymentLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deployment_type', models.CharField(choices=[('feature', 'Feature Update'), ('model', 'AI Model Update'), ('hotfix', 'Hot Fix'), ('rollback', 'Rollback')], help_text='Type of deployment', max_length=50)),
                ('version', models.CharField(help_text='Version identifier for this deployment', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('rolled_back', 'Rolled Back')], default='pending', help_text='Current status of the deployment', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When the deployment started')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the deployment completed', null=True)),
                ('details', models.JSONField(default=dict, help_text='Additional deployment details')),
                ('affected_services', models.JSONField(default=list, help_text='List of services affected by this deployment')),
            ],
            options={
                'verbose_name': 'Deployment Log',
                'verbose_name_plural': 'Deployment Logs',
                'db_table': 'monitoring_deployment_log',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='MetricData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('request_count', 'Request Count'), ('response_time', 'Response Time'), ('error_rate', 'Error Rate'), ('resource_usage', 'Resource Usage'), ('user_count', 'User Count')], max_length=50)),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('labels', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('cpu_usage', 'CPU Usage'), ('memory_usage', 'Memory Usage'), ('request_count', 'Request Count'), ('response_time', 'Response Time'), ('error_rate', 'Error Rate'), ('concurrent_users', 'Concurrent Users')], db_index=True, help_text='Type of performance metric being recorded', max_length=50)),
                ('value', models.FloatField(help_text='Measured value of the metric', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When the metric was recorded')),
                ('server_instance', models.CharField(db_index=True, help_text='Identifier of the server instance', max_length=100)),
            ],
            options={
                'verbose_name': 'Performance Metric',
                'verbose_name_plural': 'Performance Metrics',
                'db_table': 'monitoring_metric',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SystemHealth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('healthy', 'Healthy'), ('degraded', 'Degraded'), ('down', 'Down')], max_length=20)),
                ('last_check', models.DateTimeField(auto_now=True)),
                ('details', models.JSONField(default=dict)),
            ],
            options={
                'verbose_name_plural': 'System health',
                'ordering': ['component'],
            },
        ),
        migrations.CreateModel(
            name='ScalingEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('scale_up', 'Scale Up'), ('scale_down', 'Scale Down')], help_text='Type of scaling event', max_length=20)),
                ('instances_before', models.IntegerField(help_text='Number of instances before scaling', validators=[django.core.validators.MinValueValidator(0)])),
                ('instances_after', models.IntegerField(help_text='Number of instances after scaling', validators=[django.core.validators.MinValueValidator(0)])),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the scaling event occurred')),
                ('reason', models.TextField(help_text='Detailed reason for the scaling decision')),
                ('trigger_metric', models.ForeignKey(help_text='Performance metric that triggered this event', null=True, on_delete=django.db.models.deletion.SET_NULL, to='monitoring.performancemetric')),
            ],
            options={
                'verbose_name': 'Scaling Event',
                'verbose_name_plural': 'Scaling Events',
                'db_table': 'monitoring_scaling_event',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='performancemetric',
            index=models.Index(fields=['metric_type', 'timestamp'], name='monitoring__metric__970d9d_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetric',
            index=models.Index(fields=['server_instance'], name='monitoring__server__6b6794_idx'),
        ),
        migrations.AddIndex(
            model_name='metricdata',
            index=models.Index(fields=['metric_type', 'timestamp'], name='monitoring__metric__b16257_idx'),
        ),
        migrations.AddIndex(
            model_name='cacheabletracktransition',
            index=models.Index(fields=['source_track', 'target_track'], name='monitoring__source__8e972d_idx'),
        ),
        migrations.AddIndex(
            model_name='cacheabletracktransition',
            index=models.Index(fields=['hit_count'], name='monitoring__hit_cou_9cf85a_idx'),
        ),
        migrations.AddIndex(
            model_name='cacheabletracktransition',
            index=models.Index(fields=['last_accessed'], name='monitoring__last_ac_cfc8e7_idx'),
        ),
        migrations.AddField(
            model_name='alert',
            name='resolved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL),
        ),
    ]
