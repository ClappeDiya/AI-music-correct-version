# Generated by Django 4.2.9 on 2025-02-12 17:51

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CollaborativeMoodSpace',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('space_name', models.TextField(help_text='Name of the collaborative mood space.', verbose_name='Space Name')),
                ('participant_ids', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), help_text='Array of user IDs participating in the mood space.', size=None, verbose_name='Participant IDs')),
                ('combined_mood_state', models.JSONField(blank=True, help_text='JSON object containing the blended mood from all participants.', null=True, verbose_name='Combined Mood State')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the mood space was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Collaborative Mood Space',
                'verbose_name_plural': 'Collaborative Mood Spaces',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomMood',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('mood_name', models.TextField(help_text='Name of the custom mood.', verbose_name='Mood Name')),
                ('mood_parameters', models.JSONField(blank=True, help_text='JSON object containing mood parameters (e.g., warmth, energy).', null=True, verbose_name='Mood Parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the custom mood was created.', verbose_name='Created At')),
                ('user', models.ForeignKey(help_text='User who created the custom mood.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Custom Mood',
                'verbose_name_plural': 'Custom Moods',
                'ordering': ['mood_name'],
            },
        ),
        migrations.CreateModel(
            name='ExternalMoodReference',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('reference_type', models.TextField(help_text='Type of reference (e.g., weather_influence, global_trend).', verbose_name='Reference Type')),
                ('data', models.JSONField(blank=True, help_text='JSON object containing reference data.', null=True, verbose_name='Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the reference was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'External Mood Reference',
                'verbose_name_plural': 'External Mood References',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GeneratedMoodTrack',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('track_id', models.BigIntegerField(blank=True, help_text='Reference to a global track ID if available.', null=True, verbose_name='Track ID')),
                ('file_url', models.TextField(blank=True, help_text='URL of the generated track file.', null=True, verbose_name='File URL')),
                ('metadata', models.JSONField(blank=True, help_text='JSON object containing track metadata (e.g., duration, format).', null=True, verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the track was generated.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Generated Mood Track',
                'verbose_name_plural': 'Generated Mood Tracks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Mood',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='Name of the mood (e.g., uplifting, melancholic).', unique=True, verbose_name='Mood Name')),
                ('description', models.TextField(blank=True, help_text='Description of the mood.', null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the mood was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the mood was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Mood',
                'verbose_name_plural': 'Moods',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MoodRequest',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('intensity', models.DecimalField(blank=True, decimal_places=2, help_text='Intensity of the mood (0.0 to 1.0).', max_digits=5, null=True, verbose_name='Intensity')),
                ('parameters', models.JSONField(blank=True, help_text='JSON object containing additional parameters (e.g., tempo bias, instrumentation).', null=True, verbose_name='Parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the mood request was created.', verbose_name='Created At')),
                ('custom_mood', models.ForeignKey(blank=True, help_text='Custom mood selected by the user.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='mood_based_music.custommood', verbose_name='Custom Mood')),
                ('selected_mood', models.ForeignKey(blank=True, help_text='Predefined mood selected by the user.', null=True, on_delete=django.db.models.deletion.RESTRICT, to='mood_based_music.mood', verbose_name='Selected Mood')),
                ('user', models.ForeignKey(help_text='User who made the mood request.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Mood Request',
                'verbose_name_plural': 'Mood Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MoodProfile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('aggregated_preferences', models.JSONField(blank=True, help_text='JSON object containing aggregated mood preferences.', null=True, verbose_name='Aggregated Preferences')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Timestamp when the mood profile was last updated.', verbose_name='Last Updated')),
                ('user', models.ForeignKey(help_text='User who owns the mood profile.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Mood Profile',
                'verbose_name_plural': 'Mood Profiles',
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='MoodPlaylist',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('playlist_name', models.TextField(help_text='Name of the mood playlist.', verbose_name='Playlist Name')),
                ('mood_profile', models.JSONField(blank=True, help_text='JSON object containing the mood profile for the playlist.', null=True, verbose_name='Mood Profile')),
                ('auto_update', models.BooleanField(default=True, help_text='Indicates if the playlist should auto-update based on mood.', verbose_name='Auto Update')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the playlist was created.', verbose_name='Created At')),
                ('user', models.ForeignKey(help_text='User who owns the mood playlist.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Mood Playlist',
                'verbose_name_plural': 'Mood Playlists',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MoodFeedback',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('feedback_type', models.TextField(blank=True, help_text='Type of feedback (e.g., like, dislike, neutral).', null=True, verbose_name='Feedback Type')),
                ('feedback_notes', models.TextField(blank=True, help_text='Additional notes about the feedback.', null=True, verbose_name='Feedback Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the feedback was created.', verbose_name='Created At')),
                ('generated_track', models.ForeignKey(help_text='Generated track that the feedback is for.', on_delete=django.db.models.deletion.CASCADE, to='mood_based_music.generatedmoodtrack', verbose_name='Generated Track')),
                ('user', models.ForeignKey(help_text='User who provided the feedback.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Mood Feedback',
                'verbose_name_plural': 'Mood Feedbacks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MoodEmbedding',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('embedding_vector', models.BinaryField(help_text='Vector data representing the mood embedding.', verbose_name='Embedding Vector')),
                ('dimensionality', models.IntegerField(help_text='Number of dimensions in the emotional embedding.', verbose_name='Dimensionality')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the embedding was created.', verbose_name='Created At')),
                ('user', models.ForeignKey(help_text='User who owns the mood embedding.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Mood Embedding',
                'verbose_name_plural': 'Mood Embeddings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LiveMoodSession',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('session_name', models.TextField(blank=True, help_text='Name of the live mood session.', null=True, verbose_name='Session Name')),
                ('active', models.BooleanField(default=True, help_text='Indicates if the session is currently active.', verbose_name='Active')),
                ('current_mood_state', models.JSONField(blank=True, help_text='JSON object containing dynamic mood parameters.', null=True, verbose_name='Current Mood State')),
                ('last_update', models.DateTimeField(auto_now=True, help_text='Timestamp when the mood session was last updated.', verbose_name='Last Update')),
                ('user', models.ForeignKey(help_text='User who owns the live mood session.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Live Mood Session',
                'verbose_name_plural': 'Live Mood Sessions',
                'ordering': ['-last_update'],
            },
        ),
        migrations.AddField(
            model_name='generatedmoodtrack',
            name='mood_request',
            field=models.ForeignKey(help_text='Mood request that generated this track.', on_delete=django.db.models.deletion.CASCADE, to='mood_based_music.moodrequest', verbose_name='Mood Request'),
        ),
        migrations.CreateModel(
            name='ContextualTrigger',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('trigger_data', models.JSONField(blank=True, help_text='JSON object containing trigger data (e.g., time of day, weather).', null=True, verbose_name='Trigger Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the trigger was created.', verbose_name='Created At')),
                ('user', models.ForeignKey(help_text='User who owns the contextual trigger.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Contextual Trigger',
                'verbose_name_plural': 'Contextual Triggers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AdvancedMoodParameter',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('model_tweaks', models.JSONField(blank=True, help_text='JSON object containing model tweaks (e.g., layer adjustments, tonal bias).', null=True, verbose_name='Model Tweaks')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the parameter was created.', verbose_name='Created At')),
                ('user', models.ForeignKey(help_text='User who owns the advanced mood parameter.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Advanced Mood Parameter',
                'verbose_name_plural': 'Advanced Mood Parameters',
                'ordering': ['-created_at'],
            },
        ),
    ]
