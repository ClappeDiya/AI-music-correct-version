# Generated by Django 4.2.9 on 2025-02-12 17:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BehaviorTriggeredOverlay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('trigger_conditions', models.JSONField(default=dict)),
                ('overlay_config', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Behavior Triggered Overlays',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MultiUserComposite',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('participant_user_ids', models.JSONField(help_text='Array of user IDs currently using the same device/session.')),
                ('composite_prefs', models.JSONField(blank=True, help_text='JSON object storing merged preferences from all participants.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the composite was created.')),
            ],
            options={
                'verbose_name': 'Multi User Composite',
                'verbose_name_plural': 'Multi User Composites',
                'indexes': [models.Index(fields=['participant_user_ids'], name='idx_multi_user_comp')],
            },
        ),
        migrations.CreateModel(
            name='UserSettingsHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('old_preferences', models.JSONField(blank=True, help_text='JSON object storing the old user preferences.', null=True)),
                ('changed_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the settings were changed.')),
                ('user', models.ForeignKey(help_text='The user associated with these settings history.', on_delete=django.db.models.deletion.CASCADE, related_name='user_settings_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Settings History',
                'verbose_name_plural': 'User Settings Histories',
                'indexes': [models.Index(fields=['user'], name='idx_user_sett_hist')],
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('preferences', models.JSONField(blank=True, help_text='JSON object storing user preferences, e.g., theme, language, notifications.', null=True)),
                ('device_specific_settings', models.JSONField(blank=True, help_text='JSON object storing device-specific settings, e.g., mobile font size, desktop layout.', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Timestamp of the last update to these settings.')),
                ('user', models.ForeignKey(help_text='The user associated with these settings.', on_delete=django.db.models.deletion.CASCADE, related_name='user_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Setting',
                'verbose_name_plural': 'User Settings',
                'indexes': [models.Index(fields=['user'], name='idx_user_settings')],
                'unique_together': {('user',)},
            },
        ),
        migrations.CreateModel(
            name='UserSensoryTheme',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('sensory_mappings', models.JSONField(blank=True, help_text='JSON object storing sensory mappings, e.g., color maps, haptic responses.', null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of the last update to these sensory mappings.')),
                ('user', models.ForeignKey(help_text='The user associated with this sensory theme.', on_delete=django.db.models.deletion.CASCADE, related_name='user_sensory_themes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Sensory Theme',
                'verbose_name_plural': 'User Sensory Themes',
                'indexes': [models.Index(fields=['user'], name='idx_sensory_theme')],
            },
        ),
        migrations.CreateModel(
            name='UniversalProfileMapping',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('external_profile_format', models.TextField(help_text='Format of the external profile, e.g., W3C_DID, open_preference_format_v1.')),
                ('mapping_data', models.JSONField(blank=True, help_text='JSON object storing mapping data, e.g., key mappings, compatibility level.', null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of the last update to these universal profile mappings.')),
                ('user', models.ForeignKey(help_text='The user associated with this universal profile mapping.', on_delete=django.db.models.deletion.CASCADE, related_name='universal_profile_mappings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Universal Profile Mapping',
                'verbose_name_plural': 'Universal Profile Mappings',
                'indexes': [models.Index(fields=['user'], name='idx_univ_prof_map')],
                'unique_together': {('user', 'external_profile_format')},
            },
        ),
        migrations.CreateModel(
            name='TranslingualPreference',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('universal_preference_profile', models.JSONField(blank=True, help_text='JSON object storing a language-agnostic representation of preferences.', null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of the last update to these translingual preferences.')),
                ('user', models.ForeignKey(help_text='The user associated with this translingual preference.', on_delete=django.db.models.deletion.CASCADE, related_name='translingual_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Translingual Preference',
                'verbose_name_plural': 'Translingual Preferences',
                'indexes': [models.Index(fields=['user'], name='idx_translingual_prefs')],
                'unique_together': {('user',)},
            },
        ),
        migrations.CreateModel(
            name='PreferenceSuggestion',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('suggestion_data', models.JSONField(blank=True, help_text='JSON object storing the suggestion data, e.g., suggestion, reason, confidence.', null=True)),
                ('suggested_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the suggestion was made.')),
                ('user', models.ForeignKey(help_text='The user associated with this preference suggestion.', on_delete=django.db.models.deletion.CASCADE, related_name='preference_suggestions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Preference Suggestion',
                'verbose_name_plural': 'Preference Suggestions',
                'indexes': [models.Index(fields=['user'], name='idx_pref_suggest')],
            },
        ),
        migrations.CreateModel(
            name='PreferenceInheritanceLayer',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('layer_type', models.TextField(help_text='Type of the preference layer, e.g., tenant_default, community_template.')),
                ('layer_reference', models.TextField(help_text='Reference to the preference layer, e.g., tenant_default_v2.')),
                ('priority', models.IntegerField(default=10, help_text='Priority of the layer, lower number means higher priority.')),
                ('user', models.ForeignKey(help_text='The user associated with this preference inheritance layer.', on_delete=django.db.models.deletion.CASCADE, related_name='preference_inheritance_layers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Preference Inheritance Layer',
                'verbose_name_plural': 'Preference Inheritance Layers',
                'indexes': [models.Index(fields=['user'], name='idx_pref_inherit')],
            },
        ),
        migrations.CreateModel(
            name='PreferenceExternalization',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('external_identity_ref', models.TextField(help_text='A blockchain address or DID.', unique=True)),
                ('exported_preferences_hash', models.TextField(help_text='Hash of the preferences JSON to ensure integrity.')),
                ('linked_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the preferences were linked.')),
                ('service_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
                ('endpoint_url', models.URLField()),
                ('sync_frequency', models.IntegerField(default=60)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='The user associated with this preference externalization.', on_delete=django.db.models.deletion.CASCADE, related_name='preference_externalizations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Preference Externalization',
                'verbose_name_plural': 'Preference Externalizations',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user'], name='idx_pref_ext')],
            },
        ),
        migrations.CreateModel(
            name='PredictivePreferenceModel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('model_metadata', models.JSONField(blank=True, help_text='JSON object storing model metadata, e.g., model type, last trained, performance metrics.', null=True)),
                ('user', models.ForeignKey(help_text='The user associated with this predictive preference model.', on_delete=django.db.models.deletion.CASCADE, related_name='predictive_preference_models', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Predictive Preference Model',
                'verbose_name_plural': 'Predictive Preference Models',
                'indexes': [models.Index(fields=['user'], name='idx_pred_pref_mod')],
            },
        ),
        migrations.CreateModel(
            name='PredictivePreferenceEvent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('applied_changes', models.JSONField(blank=True, help_text='JSON object storing applied changes, e.g., night_mode, reduced_notifications.', null=True)),
                ('applied_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the changes were applied.')),
                ('reason', models.TextField(blank=True, help_text='Reason for applying the changes.', null=True)),
                ('user', models.ForeignKey(help_text='The user associated with this predictive preference event.', on_delete=django.db.models.deletion.CASCADE, related_name='predictive_preference_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Predictive Preference Event',
                'verbose_name_plural': 'Predictive Preference Events',
                'indexes': [models.Index(fields=['user'], name='idx_pred_pref_evt')],
            },
        ),
        migrations.CreateModel(
            name='PersonaFusion',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the fused persona', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the fused persona')),
                ('source_personas', models.JSONField(help_text='Array of source personas, e.g., casual_listening, professional_dj.')),
                ('fused_profile', models.JSONField(blank=True, help_text='JSON object storing the resulting hybrid preference set.', null=True)),
                ('fusion_weights', models.JSONField(blank=True, help_text='Weights used in the fusion process for each source persona', null=True)),
                ('confidence_score', models.FloatField(blank=True, help_text="ML model's confidence in the fusion result", null=True)),
                ('is_active', models.BooleanField(default=False, help_text='Whether this fusion is currently active')),
                ('last_used', models.DateTimeField(blank=True, help_text='When this fusion was last activated', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the persona fusion was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of when the persona fusion was last updated')),
                ('user', models.ForeignKey(help_text='The user associated with this persona fusion.', on_delete=django.db.models.deletion.CASCADE, related_name='persona_fusions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Persona Fusion',
                'verbose_name_plural': 'Persona Fusions',
                'ordering': ['-last_used', '-created_at'],
                'indexes': [models.Index(fields=['user'], name='idx_persona_fusions'), models.Index(fields=['is_active'], name='idx_persona_active')],
            },
        ),
        migrations.CreateModel(
            name='EphemeralEventPreference',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_key', models.TextField(help_text='Key for the event, e.g., live_concert_2025, holiday_mode.')),
                ('ephemeral_prefs', models.JSONField(blank=True, help_text='JSON object storing temporary preferences.', null=True)),
                ('start_time', models.DateTimeField(blank=True, help_text='Timestamp of when the ephemeral preferences start.', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='Timestamp of when the ephemeral preferences end.', null=True)),
                ('event_type', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('duration_minutes', models.IntegerField(default=30)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('next_scheduled', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='The user associated with this ephemeral event preference.', on_delete=django.db.models.deletion.CASCADE, related_name='ephemeral_event_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ephemeral Event Preference',
                'verbose_name_plural': 'Ephemeral Event Preferences',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user'], name='idx_ephemeral_event')],
            },
        ),
        migrations.CreateModel(
            name='ContextualProfile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('trigger_conditions', models.JSONField(blank=True, help_text='JSON object storing trigger conditions, e.g., time range, location, biometric signal.', null=True)),
                ('profile_adjustments', models.JSONField(blank=True, help_text='JSON object storing profile adjustments, e.g., reduce volume, dark mode.', null=True)),
                ('user', models.ForeignKey(help_text='The user associated with this contextual profile.', on_delete=django.db.models.deletion.CASCADE, related_name='contextual_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contextual Profile',
                'verbose_name_plural': 'Contextual Profiles',
                'indexes': [models.Index(fields=['user'], name='idx_context_prof')],
            },
        ),
    ]
