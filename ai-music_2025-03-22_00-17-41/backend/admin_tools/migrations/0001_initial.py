# Generated by Django 4.2.9 on 2025-02-12 17:48

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('user_management', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='ComplianceReference',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('reference_code', models.TextField(help_text='Unique code for the compliance reference.', unique=True, verbose_name='Reference Code')),
                ('reference_details', models.JSONField(blank=True, help_text='Details about the compliance reference (e.g., law, section).', null=True, verbose_name='Reference Details')),
            ],
            options={
                'verbose_name': 'Compliance Reference',
                'verbose_name_plural': 'Compliance References',
            },
        ),
        migrations.CreateModel(
            name='ModerationReason',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('reason_code', models.TextField(help_text="Unique code for the moderation reason (e.g., 'hate_speech', 'copyright_infringement').", unique=True, verbose_name='Reason Code')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the moderation reason.', null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the moderation reason was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Moderation Reason',
                'verbose_name_plural': 'Moderation Reasons',
            },
        ),
        migrations.CreateModel(
            name='PatternModerationRule',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('rule_name', models.TextField(help_text='Unique name for the moderation rule.', unique=True, verbose_name='Rule Name')),
                ('rule_data', models.JSONField(help_text='Data for the moderation rule (e.g., trigger keywords, action).', verbose_name='Rule Data')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the rule was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Pattern Moderation Rule',
                'verbose_name_plural': 'Pattern Moderation Rules',
                'indexes': [models.Index(fields=['rule_name'], name='admin_tools_rule_na_658ba4_idx')],
            },
        ),
        migrations.CreateModel(
            name='ModerationAction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('target_ref', models.TextField(blank=True, help_text="Reference to the target of the action (e.g., 'user:789', 'post:123').", null=True, verbose_name='Target Reference')),
                ('action_type', models.TextField(help_text="Type of moderation action (e.g., 'remove_content', 'warn_user', 'suspend_user').", verbose_name='Action Type')),
                ('action_details', models.JSONField(blank=True, help_text='Additional details about the action (e.g., duration, justification).', null=True, verbose_name='Action Details')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the action was taken.', verbose_name='Created At')),
                ('admin_user', models.ForeignKey(help_text='Admin or moderator who took the action.', on_delete=django.db.models.deletion.CASCADE, related_name='moderation_actions', to='user_management.user', verbose_name='Admin User')),
            ],
            options={
                'verbose_name': 'Moderation Action',
                'verbose_name_plural': 'Moderation Actions',
            },
        ),
        migrations.CreateModel(
            name='LegalSummary',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('reference_code', models.TextField(help_text='Unique code for the legal reference.', unique=True, verbose_name='Reference Code')),
                ('summary_text', models.TextField(help_text='Human-readable summary of the legal text.', verbose_name='Summary Text')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the summary was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Legal Summary',
                'verbose_name_plural': 'Legal Summaries',
                'indexes': [models.Index(fields=['reference_code'], name='admin_tools_referen_43b5ec_idx')],
            },
        ),
        migrations.CreateModel(
            name='InterventionPipeline',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('pipeline_name', models.TextField(help_text='Unique name for the intervention pipeline.', unique=True, verbose_name='Pipeline Name')),
                ('trigger_conditions', models.JSONField(help_text='Conditions that trigger the pipeline (e.g., spike in reports, specific keyword).', verbose_name='Trigger Conditions')),
                ('actions', models.JSONField(help_text='Actions to take when the pipeline is triggered (e.g., freeze content, notify admin).', verbose_name='Actions')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the pipeline was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Intervention Pipeline',
                'verbose_name_plural': 'Intervention Pipelines',
                'indexes': [models.Index(fields=['pipeline_name'], name='admin_tools_pipelin_04789e_idx')],
            },
        ),
        migrations.CreateModel(
            name='DelegationChain',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('permissions', models.JSONField(help_text='Permissions granted to the junior admin (e.g., can remove content, can suspend users).', verbose_name='Permissions')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the delegation chain was created.', verbose_name='Created At')),
                ('junior_admin', models.ForeignKey(help_text='Junior admin in the delegation chain.', on_delete=django.db.models.deletion.CASCADE, related_name='delegation_chains_junior', to='user_management.user', verbose_name='Junior Admin')),
                ('senior_admin', models.ForeignKey(help_text='Senior admin in the delegation chain.', on_delete=django.db.models.deletion.CASCADE, related_name='delegation_chains_senior', to='user_management.user', verbose_name='Senior Admin')),
            ],
            options={
                'verbose_name': 'Delegation Chain',
                'verbose_name_plural': 'Delegation Chains',
            },
        ),
        migrations.CreateModel(
            name='BulkModerationTemplate',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('template_name', models.TextField(help_text='Unique name for the bulk moderation template.', unique=True, verbose_name='Template Name')),
                ('template_data', models.JSONField(help_text='Data for the bulk moderation template (e.g., action type, criteria).', verbose_name='Template Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the template was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Bulk Moderation Template',
                'verbose_name_plural': 'Bulk Moderation Templates',
                'indexes': [models.Index(fields=['template_name'], name='admin_tools_templat_d4c8c5_idx')],
            },
        ),
        migrations.CreateModel(
            name='BulkAction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('action_type', models.TextField(help_text="Type of bulk action (e.g., 'mass_suspension', 'bulk_content_removal').", verbose_name='Action Type')),
                ('targets', models.JSONField(help_text='Targets of the bulk action (e.g., list of users, posts).', verbose_name='Targets')),
                ('executed_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the bulk action was executed.', verbose_name='Executed At')),
                ('admin_user', models.ForeignKey(help_text='Admin or moderator who initiated the bulk action.', on_delete=django.db.models.deletion.CASCADE, related_name='bulk_actions', to='user_management.user', verbose_name='Admin User')),
            ],
            options={
                'verbose_name': 'Bulk Action',
                'verbose_name_plural': 'Bulk Actions',
            },
        ),
        migrations.CreateModel(
            name='AutomatedScanningResult',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('content_ref', models.TextField(help_text='Reference to the scanned content.', verbose_name='Content Reference')),
                ('scan_data', models.JSONField(help_text='Data from the scan (e.g., detected hate speech, confidence score).', verbose_name='Scan Data')),
                ('scanned_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the content was scanned.', verbose_name='Scanned At')),
            ],
            options={
                'verbose_name': 'Automated Scanning Result',
                'verbose_name_plural': 'Automated Scanning Results',
                'indexes': [models.Index(fields=['content_ref'], name='admin_tools_content_5ca71e_idx')],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('action_description', models.TextField(help_text='Description of the action performed.', verbose_name='Action Description')),
                ('related_ref', models.TextField(blank=True, help_text='Reference to the related content or user.', null=True, verbose_name='Related Reference')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the action was performed.', verbose_name='Timestamp')),
                ('actor_user', models.ForeignKey(blank=True, help_text='User who performed the action.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to='user_management.user', verbose_name='Actor User')),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
            },
        ),
        migrations.CreateModel(
            name='AnomalyAlert',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('alert_type', models.TextField(help_text="Type of anomaly alert (e.g., 'spike_in_reports', 'unusual_language_pattern').", verbose_name='Alert Type')),
                ('alert_data', models.JSONField(help_text='Data for the anomaly alert (e.g., report count, expected count).', verbose_name='Alert Data')),
                ('triggered_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the alert was triggered.', verbose_name='Triggered At')),
            ],
            options={
                'verbose_name': 'Anomaly Alert',
                'verbose_name_plural': 'Anomaly Alerts',
                'indexes': [models.Index(fields=['alert_type'], name='admin_tools_alert_t_1e3cce_idx')],
            },
        ),
        migrations.CreateModel(
            name='ReportedContent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('unassigned', 'Unassigned'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('escalated', 'Escalated to Admin')], default='unassigned', max_length=20)),
                ('content_ref', models.TextField(help_text="Reference to the reported content (e.g., 'post:123', 'track:456').", verbose_name='Content Reference')),
                ('additional_details', models.JSONField(blank=True, help_text='Additional details about the report (e.g., screenshot URL, comment).', null=True, verbose_name='Additional Details')),
                ('reported_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the content was reported.', verbose_name='Reported At')),
                ('assigned_moderator', models.ForeignKey(blank=True, help_text='Moderator assigned to handle this report.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_reports', to='user_management.user', verbose_name='Assigned Moderator')),
                ('reason', models.ForeignKey(blank=True, help_text='Optional link to a standard moderation reason.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_tools.moderationreason', verbose_name='Reason')),
                ('reporter_user', models.ForeignKey(help_text='User who reported the content.', on_delete=django.db.models.deletion.CASCADE, related_name='reported_contents', to='user_management.user', verbose_name='Reporter User')),
            ],
            options={
                'verbose_name': 'Reported Content',
                'verbose_name_plural': 'Reported Contents',
                'indexes': [models.Index(fields=['reporter_user'], name='admin_tools_reporte_b66d71_idx')],
            },
        ),
        migrations.CreateModel(
            name='ModeratorPerformance',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('performance_metrics', models.JSONField(help_text="Metrics about the moderator's performance (e.g., resolved reports, average response time).", verbose_name='Performance Metrics')),
                ('badges_awarded', models.TextField(blank=True, help_text="Badges awarded to the moderator (e.g., 'Top Moderator Q1', 'Accuracy Star').", null=True, verbose_name='Badges Awarded')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the performance was last updated.', verbose_name='Updated At')),
                ('moderator_user', models.ForeignKey(help_text='Moderator user whose performance is being tracked.', on_delete=django.db.models.deletion.CASCADE, related_name='moderator_performances', to='user_management.user', verbose_name='Moderator User')),
            ],
            options={
                'verbose_name': 'Moderator Performance',
                'verbose_name_plural': 'Moderator Performances',
                'indexes': [models.Index(fields=['moderator_user'], name='admin_tools_moderat_113ee5_idx')],
            },
        ),
        migrations.CreateModel(
            name='ModeratorAssistantInteraction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('query', models.TextField(help_text='Query made by the moderator to the AI assistant.', verbose_name='Query')),
                ('suggested_actions', models.JSONField(help_text='Actions suggested by the AI assistant (e.g., recommended action, confidence score).', verbose_name='Suggested Actions')),
                ('provided_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the suggestion was provided.', verbose_name='Provided At')),
                ('moderator_user', models.ForeignKey(help_text='Moderator user who interacted with the AI assistant.', on_delete=django.db.models.deletion.CASCADE, related_name='moderator_assistant_interactions', to='user_management.user', verbose_name='Moderator User')),
            ],
            options={
                'verbose_name': 'Moderator Assistant Interaction',
                'verbose_name_plural': 'Moderator Assistant Interactions',
                'indexes': [models.Index(fields=['moderator_user'], name='admin_tools_moderat_d4a08e_idx')],
            },
        ),
        migrations.CreateModel(
            name='ModerationKnowledgeExchange',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('pattern_data', models.JSONField(help_text='Data about the shared patterns (e.g., spam signatures, abuse patterns).', verbose_name='Pattern Data')),
                ('tags', models.TextField(help_text="Tags for the shared data (e.g., 'spam', 'phishing').", verbose_name='Tags')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the data was shared.', verbose_name='Created At')),
                ('shared_by_user', models.ForeignKey(help_text='User who shared the data.', on_delete=django.db.models.deletion.CASCADE, related_name='shared_knowledge', to='user_management.user', verbose_name='Shared By User')),
            ],
            options={
                'verbose_name': 'Moderation Knowledge Exchange',
                'verbose_name_plural': 'Moderation Knowledge Exchanges',
                'indexes': [models.Index(fields=['tags'], name='idx_moderation_knowledge_tags')],
            },
        ),
        migrations.AddConstraint(
            model_name='moderationknowledgeexchange',
            constraint=models.CheckConstraint(check=models.Q(('tags__exact', ''), _negated=True), name='tags_not_empty'),
        ),
        migrations.AddIndex(
            model_name='moderationaction',
            index=models.Index(fields=['admin_user'], name='admin_tools_admin_u_97d083_idx'),
        ),
        migrations.AddIndex(
            model_name='delegationchain',
            index=models.Index(fields=['senior_admin'], name='admin_tools_senior__f87275_idx'),
        ),
        migrations.AddConstraint(
            model_name='delegationchain',
            constraint=models.CheckConstraint(check=models.Q(('senior_admin', models.F('junior_admin')), _negated=True), name='senior_admin_not_equal_junior_admin'),
        ),
        migrations.AddIndex(
            model_name='bulkaction',
            index=models.Index(fields=['admin_user'], name='admin_tools_admin_u_bcae6f_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['actor_user'], name='admin_tools_actor_u_f625ec_idx'),
        ),
    ]
