# Generated by Django 4.2.9 on 2025-02-12 17:51

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalyticsEvent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_type', models.TextField(verbose_name='Event Type')),
                ('metadata', models.JSONField(default=dict, verbose_name='Event Metadata')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('session_id', models.UUIDField(null=True)),
                ('client_timestamp', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'Analytics Event',
                'verbose_name_plural': 'Analytics Events',
            },
        ),
        migrations.CreateModel(
            name='CommunityCluster',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cluster_name', models.TextField(help_text='Name of the community cluster.', verbose_name='Cluster Name')),
                ('description', models.TextField(blank=True, help_text='Description of the community cluster.', null=True, verbose_name='Description')),
                ('user_ids', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), help_text='Array of user IDs belonging to this cluster.', size=None, verbose_name='User IDs')),
                ('metadata', models.JSONField(blank=True, help_text='Additional metadata for the cluster (e.g., interests, activity level).', null=True, verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the cluster was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Community Cluster',
                'verbose_name_plural': 'Community Clusters',
                'ordering': ['cluster_name'],
            },
        ),
        migrations.CreateModel(
            name='CommunityEventCategory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('category_name', models.TextField(help_text='Name of the event category.', unique=True, verbose_name='Category Name')),
                ('description', models.TextField(blank=True, help_text='Description of the event category.', null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the category was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Community Event Category',
                'verbose_name_plural': 'Community Event Categories',
                'ordering': ['category_name'],
            },
        ),
        migrations.CreateModel(
            name='EphemeralPresence',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('presence_status', models.TextField(help_text="Current presence status ('online', 'idle', 'offline').", verbose_name='Presence Status')),
                ('last_seen', models.DateTimeField(auto_now=True, help_text='Date and time when the user was last seen.', verbose_name='Last Seen')),
            ],
            options={
                'verbose_name': 'Ephemeral Presence',
                'verbose_name_plural': 'Ephemeral Presences',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_name', models.TextField(help_text='Name of the event.', verbose_name='Event Name')),
                ('description', models.TextField(blank=True, help_text='Description of the event.', null=True, verbose_name='Description')),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time of the event.', null=True, verbose_name='Start Time')),
                ('end_time', models.DateTimeField(blank=True, help_text='End time of the event.', null=True, verbose_name='End Time')),
                ('metadata', models.JSONField(blank=True, help_text='Additional metadata for the event (e.g., challenge type, prizes).', null=True, verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the event was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['event_name'],
            },
        ),
        migrations.CreateModel(
            name='EventParticipation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('participated_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the user participated in the event.', verbose_name='Participated At')),
            ],
            options={
                'verbose_name': 'Event Participation',
                'verbose_name_plural': 'Event Participations',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('group_name', models.TextField(help_text='Name of the group.', verbose_name='Group Name')),
                ('description', models.TextField(blank=True, help_text='Description of the group.', null=True, verbose_name='Description')),
                ('privacy', models.TextField(default='public', help_text="Privacy setting of the group ('public', 'private', 'invite_only').", verbose_name='Privacy')),
                ('metadata', models.JSONField(blank=True, help_text='Additional metadata for the group (e.g., topic, rules).', null=True, verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the group was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
                'ordering': ['group_name'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('track_id', models.BigIntegerField(blank=True, help_text='ID of the track associated with the post (optional).', null=True, verbose_name='Track ID')),
                ('content', models.TextField(help_text='Content of the post.', verbose_name='Content')),
                ('metadata', models.JSONField(blank=True, help_text='Additional metadata for the post (e.g., tags, influences).', null=True, verbose_name='Metadata')),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('followers', 'Followers Only'), ('private', 'Private'), ('group', 'Group Members')], default='public', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the post was created.', verbose_name='Created At')),
                ('user', models.ForeignKey(help_text='User who created the post.', on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('comment_text', models.TextField(help_text='Text of the comment.', verbose_name='Comment Text')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the comment was created.', verbose_name='Created At')),
                ('post', models.ForeignKey(help_text='Post the comment belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='social_community.post', verbose_name='Post')),
                ('user', models.ForeignKey(help_text='User who created the comment.', on_delete=django.db.models.deletion.CASCADE, related_name='post_comments', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Post Comment',
                'verbose_name_plural': 'Post Comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrackReference',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('module_type', models.TextField(verbose_name='Module Type')),
                ('module_id', models.BigIntegerField(verbose_name='Module ID')),
                ('current_version', models.IntegerField(default=1)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('original_track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_references', to='social_community.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Track Reference',
                'verbose_name_plural': 'Track References',
            },
        ),
        migrations.CreateModel(
            name='UserTip',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount of the tip.', max_digits=10, verbose_name='Amount')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the tip was created.', verbose_name='Created At')),
                ('recipient_user', models.ForeignKey(help_text='User who received the tip.', on_delete=django.db.models.deletion.CASCADE, related_name='tips_received', to=settings.AUTH_USER_MODEL, verbose_name='Recipient User')),
                ('related_comment', models.ForeignKey(blank=True, help_text='Comment related to the tip (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tips', to='social_community.postcomment', verbose_name='Related Comment')),
                ('related_post', models.ForeignKey(blank=True, help_text='Post related to the tip (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tips', to='social_community.post', verbose_name='Related Post')),
                ('tipper', models.ForeignKey(help_text='User who sent the tip.', on_delete=django.db.models.deletion.CASCADE, related_name='tips_given', to=settings.AUTH_USER_MODEL, verbose_name='Tipper')),
            ],
            options={
                'verbose_name': 'User Tip',
                'verbose_name_plural': 'User Tips',
            },
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the follow was created.', verbose_name='Created At')),
                ('followee', models.ForeignKey(help_text='User who is being followed.', on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL, verbose_name='Followee')),
                ('follower', models.ForeignKey(help_text='User who is following.', on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL, verbose_name='Follower')),
            ],
            options={
                'verbose_name': 'User Follow',
                'verbose_name_plural': 'User Follows',
            },
        ),
        migrations.CreateModel(
            name='TranslationSuggestion',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('original_content_type', models.TextField(help_text="Type of the original content ('post' or 'comment').", verbose_name='Original Content Type')),
                ('original_content_id', models.BigIntegerField(help_text='ID of the original content.', verbose_name='Original Content ID')),
                ('suggested_language', models.TextField(help_text="Language of the translation suggestion (e.g., 'en', 'fr', 'es').", verbose_name='Suggested Language')),
                ('translated_text', models.TextField(help_text='Translated text.', verbose_name='Translated Text')),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, help_text='Confidence score of the translation (e.g., 0.95).', max_digits=3, null=True, verbose_name='Confidence Score')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the translation suggestion was created.', verbose_name='Created At')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Translation Suggestion',
                'verbose_name_plural': 'Translation Suggestions',
            },
        ),
        migrations.CreateModel(
            name='TrackVersion',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('version_number', models.IntegerField()),
                ('changes', models.TextField(verbose_name='Version Changes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('track_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='social_community.trackreference')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Track Version',
                'verbose_name_plural': 'Track Versions',
            },
        ),
        migrations.CreateModel(
            name='PrivacySetting',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('settings', models.JSONField(help_text='JSON object containing privacy settings (e.g., show_posts_to, allow_follows).', verbose_name='Settings')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the privacy settings were last updated.', verbose_name='Updated At')),
                ('user', models.OneToOneField(help_text='User the privacy settings belong to.', on_delete=django.db.models.deletion.CASCADE, related_name='social_privacy_settings', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Privacy Setting',
                'verbose_name_plural': 'Privacy Settings',
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the like was created.', verbose_name='Created At')),
                ('post', models.ForeignKey(help_text='Post that was liked.', on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='social_community.post', verbose_name='Post')),
                ('user', models.ForeignKey(help_text='User who liked the post.', on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Post Like',
                'verbose_name_plural': 'Post Likes',
            },
        ),
        migrations.CreateModel(
            name='ModerationAction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('action_type', models.TextField(help_text="Type of moderation action ('warn', 'suspend', 'remove_post').", verbose_name='Action Type')),
                ('reason', models.TextField(blank=True, help_text='Reason for the moderation action.', null=True, verbose_name='Reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the moderation action was created.', verbose_name='Created At')),
                ('moderator_user', models.ForeignKey(help_text='User who performed the moderation action.', on_delete=django.db.models.deletion.RESTRICT, related_name='moderation_actions_taken', to=settings.AUTH_USER_MODEL, verbose_name='Moderator User')),
                ('target_post', models.ForeignKey(blank=True, help_text='Post that was moderated (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderation_actions_received', to='social_community.post', verbose_name='Target Post')),
                ('target_user', models.ForeignKey(blank=True, help_text='User who was moderated (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderation_actions_received', to=settings.AUTH_USER_MODEL, verbose_name='Target User')),
            ],
            options={
                'verbose_name': 'Moderation Action',
                'verbose_name_plural': 'Moderation Actions',
            },
        ),
        migrations.CreateModel(
            name='LLMRequest',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('prompt', models.TextField(verbose_name='Generation Prompt')),
                ('result', models.TextField(blank=True, null=True, verbose_name='Generation Result')),
                ('status', models.TextField(default='pending', verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(default=dict, verbose_name='Request Metadata')),
                ('token_count', models.IntegerField(default=0)),
                ('completion_tokens', models.IntegerField(default=0)),
                ('total_tokens', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'LLM Request',
                'verbose_name_plural': 'LLM Requests',
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('role', models.TextField(default='member', help_text="Role of the user in the group ('member', 'admin', 'moderator').", verbose_name='Role')),
                ('joined_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the user joined the group.', verbose_name='Joined At')),
                ('group', models.ForeignKey(help_text='Group the membership belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='social_community.group', verbose_name='Group')),
                ('user', models.ForeignKey(help_text='User who is a member of the group.', on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Group Membership',
                'verbose_name_plural': 'Group Memberships',
            },
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['group_name'], name='social_comm_group_n_c5b8c6_idx'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='event',
            field=models.ForeignKey(help_text='Event the participation belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='social_community.event', verbose_name='Event'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='post',
            field=models.ForeignKey(blank=True, help_text='Post submitted as an entry for the event (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_entries', to='social_community.post', verbose_name='Post'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='user',
            field=models.ForeignKey(help_text='User who participated in the event.', on_delete=django.db.models.deletion.CASCADE, related_name='event_participations', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='event',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Category of the event.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='social_community.communityeventcategory', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='ephemeralpresence',
            name='user',
            field=models.ForeignKey(help_text='User whose presence is being tracked.', on_delete=django.db.models.deletion.CASCADE, related_name='ephemeral_presences', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddIndex(
            model_name='communitycluster',
            index=models.Index(fields=['cluster_name'], name='social_comm_cluster_aa1579_idx'),
        ),
        migrations.AddField(
            model_name='analyticsevent',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='usertip',
            index=models.Index(fields=['recipient_user'], name='social_comm_recipie_c7f2c9_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['follower'], name='social_comm_followe_20045d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfollow',
            unique_together={('follower', 'followee')},
        ),
        migrations.AddIndex(
            model_name='translationsuggestion',
            index=models.Index(fields=['original_content_id'], name='social_comm_origina_6dad23_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trackversion',
            unique_together={('track_reference', 'version_number')},
        ),
        migrations.AddIndex(
            model_name='trackreference',
            index=models.Index(fields=['module_type', 'module_id'], name='social_comm_module__90493b_idx'),
        ),
        migrations.AddIndex(
            model_name='postlike',
            index=models.Index(fields=['post'], name='social_comm_post_id_57cf1c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='postlike',
            unique_together={('post', 'user')},
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['post'], name='social_comm_post_id_285977_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['user'], name='social_comm_user_id_7746f5_idx'),
        ),
        migrations.AddIndex(
            model_name='llmrequest',
            index=models.Index(fields=['user', 'created_at'], name='social_comm_user_id_2b6615_idx'),
        ),
        migrations.AddIndex(
            model_name='llmrequest',
            index=models.Index(fields=['status'], name='social_comm_status_f54aaa_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['group'], name='social_comm_group_i_bf4ba1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='groupmembership',
            unique_together={('group', 'user')},
        ),
        migrations.AddIndex(
            model_name='eventparticipation',
            index=models.Index(fields=['event'], name='social_comm_event_i_7281cc_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_name'], name='social_comm_event_n_950895_idx'),
        ),
        migrations.AddIndex(
            model_name='ephemeralpresence',
            index=models.Index(fields=['user'], name='social_comm_user_id_3c1a1b_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsevent',
            index=models.Index(fields=['event_type'], name='social_comm_event_t_e22985_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsevent',
            index=models.Index(fields=['timestamp'], name='social_comm_timesta_a2e946_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsevent',
            index=models.Index(fields=['user', 'timestamp'], name='social_comm_user_id_f3e046_idx'),
        ),
    ]
