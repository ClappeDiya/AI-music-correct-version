# Generated by Django 4.2.9 on 2025-02-12 17:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CollaborativeLyricSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Collaborative Lyric Session',
                'verbose_name_plural': 'Collaborative Lyric Sessions',
            },
        ),
        migrations.CreateModel(
            name='FinalLyrics',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('track_id', models.BigIntegerField(help_text='ID of the track associated with these lyrics', verbose_name='Track ID')),
                ('lyrics_content', models.TextField(help_text='Final lyrics text', verbose_name='Lyrics Content')),
                ('metadata', models.JSONField(blank=True, help_text='Additional info (e.g., language, final rhyme scheme)', null=True, verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the final lyrics were created', verbose_name='Created At')),
                ('user', models.ForeignKey(help_text='User who finalized the lyrics', on_delete=django.db.models.deletion.CASCADE, related_name='final_lyrics', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Final Lyrics',
                'verbose_name_plural': 'Final Lyrics',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.TextField(help_text="Language code (e.g., 'en', 'en-US', 'fr-FR')", unique=True, verbose_name='Language Code')),
                ('name', models.TextField(help_text='Name of the language', verbose_name='Language Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the language was created', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='LLMProvider',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='Name of the LLM provider', unique=True, verbose_name='Provider Name')),
                ('provider_type', models.TextField(help_text="Type of the provider (e.g., 'open_source', 'third_party')", verbose_name='Provider Type')),
                ('api_endpoint', models.TextField(blank=True, help_text='API endpoint for the provider', null=True, verbose_name='API Endpoint')),
                ('api_credentials', models.JSONField(blank=True, help_text='API credentials for the provider', null=True, verbose_name='API Credentials')),
                ('active', models.BooleanField(default=True, help_text='Whether the provider is active', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the provider was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the provider was last updated', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'LLM Provider',
                'verbose_name_plural': 'LLM Providers',
            },
        ),
        migrations.CreateModel(
            name='LyricDraft',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('draft_content', models.TextField(blank=True, help_text='The full drafted lyrics from the AI', null=True, verbose_name='Draft Content')),
                ('metadata', models.JSONField(blank=True, help_text='Additional info (e.g., rhyme score, syllable count)', null=True, verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the draft was created', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Lyric Draft',
                'verbose_name_plural': 'Lyric Drafts',
            },
        ),
        migrations.CreateModel(
            name='LyricInfluencer',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='Name of the lyric influencer', unique=True, verbose_name='Influencer Name')),
                ('style_tags', models.JSONField(blank=True, help_text='Style tags (e.g., genres, themes)', null=True, verbose_name='Style Tags')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the influencer was created', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Lyric Influencer',
                'verbose_name_plural': 'Lyric Influencers',
            },
        ),
        migrations.CreateModel(
            name='LyricTimeline',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('lyric_segment', models.TextField(help_text='A line or phrase of the lyrics', verbose_name='Lyric Segment')),
                ('start_time_seconds', models.DecimalField(decimal_places=3, help_text='When this lyric starts in the track', max_digits=10, verbose_name='Start Time (seconds)')),
                ('end_time_seconds', models.DecimalField(blank=True, decimal_places=3, help_text='When this lyric ends in the track (optional)', max_digits=10, null=True, verbose_name='End Time (seconds)')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the timeline was created', verbose_name='Created At')),
                ('final_lyrics', models.ForeignKey(help_text='Final lyrics associated with this timeline', on_delete=django.db.models.deletion.CASCADE, related_name='lyric_timeline', to='lyrics_generation.finallyrics', verbose_name='Final Lyrics')),
            ],
            options={
                'verbose_name': 'Lyric Timeline',
                'verbose_name_plural': 'Lyric Timelines',
            },
        ),
        migrations.CreateModel(
            name='LyricSignature',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('signature_hash', models.TextField(help_text='Cryptographic hash of the lyrics content', unique=True, verbose_name='Signature Hash')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the signature was created', verbose_name='Created At')),
                ('final_lyrics', models.ForeignKey(help_text='Final lyrics associated with this signature', on_delete=django.db.models.deletion.CASCADE, related_name='lyric_signatures', to='lyrics_generation.finallyrics', verbose_name='Final Lyrics')),
            ],
            options={
                'verbose_name': 'Lyric Signature',
                'verbose_name_plural': 'Lyric Signatures',
            },
        ),
        migrations.CreateModel(
            name='LyricShareLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('max_uses', models.IntegerField(blank=True, null=True)),
                ('times_used', models.IntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_share_links', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='share_links', to='lyrics_generation.collaborativelyricsession')),
            ],
            options={
                'verbose_name': 'Lyric Share Link',
                'verbose_name_plural': 'Lyric Share Links',
            },
        ),
        migrations.CreateModel(
            name='LyricPrompt',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('prompt_text', models.TextField(help_text='User prompt (theme, keywords, emotion)', verbose_name='Prompt Text')),
                ('parameters', models.JSONField(blank=True, help_text='Parameters for the prompt (e.g., complexity, rhyme scheme, language)', null=True, verbose_name='Parameters')),
                ('language_code', models.TextField(blank=True, help_text='Language code for the prompt', null=True, verbose_name='Language Code')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the prompt was created', verbose_name='Created At')),
                ('track_id', models.BigIntegerField(help_text='ID of the track associated with these lyrics', verbose_name='Track ID')),
                ('influencer', models.ForeignKey(blank=True, help_text='Influencer for the prompt', null=True, on_delete=django.db.models.deletion.SET_NULL, to='lyrics_generation.lyricinfluencer', verbose_name='Lyric Influencer')),
                ('provider', models.ForeignKey(help_text='LLM provider used for generating lyrics', on_delete=django.db.models.deletion.RESTRICT, to='lyrics_generation.llmprovider', verbose_name='LLM Provider')),
                ('user', models.ForeignKey(help_text='User who created the prompt', on_delete=django.db.models.deletion.CASCADE, related_name='lyric_prompts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Lyric Prompt',
                'verbose_name_plural': 'Lyric Prompts',
            },
        ),
        migrations.CreateModel(
            name='LyricModelVersion',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('model_version', models.TextField(help_text="Version of the lyric generation model (e.g., 'v2.5')", verbose_name='Model Version')),
                ('embeddings', models.JSONField(blank=True, help_text='Embeddings or vector data representing the lyric style', null=True, verbose_name='Embeddings')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the model version was created', verbose_name='Created At')),
                ('prompt', models.ForeignKey(help_text='Lyric prompt associated with this model version', on_delete=django.db.models.deletion.CASCADE, related_name='lyric_model_versions', to='lyrics_generation.lyricprompt', verbose_name='Lyric Prompt')),
            ],
            options={
                'verbose_name': 'Lyric Model Version',
                'verbose_name_plural': 'Lyric Model Versions',
            },
        ),
        migrations.CreateModel(
            name='LyricEdit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('edited_content', models.TextField(blank=True, help_text='The edited version after user changes', null=True, verbose_name='Edited Content')),
                ('edit_notes', models.TextField(blank=True, help_text='Reasoning or notes about changes', null=True, verbose_name='Edit Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the edit was created', verbose_name='Created At')),
                ('draft', models.ForeignKey(help_text='Lyric draft associated with this edit', on_delete=django.db.models.deletion.CASCADE, related_name='lyric_edits', to='lyrics_generation.lyricdraft', verbose_name='Lyric Draft')),
            ],
            options={
                'verbose_name': 'Lyric Edit',
                'verbose_name_plural': 'Lyric Edits',
            },
        ),
        migrations.AddField(
            model_name='lyricdraft',
            name='prompt',
            field=models.ForeignKey(help_text='Lyric prompt associated with this draft', on_delete=django.db.models.deletion.CASCADE, related_name='lyric_drafts', to='lyrics_generation.lyricprompt', verbose_name='Lyric Prompt'),
        ),
        migrations.CreateModel(
            name='LyricAdaptiveFeedback',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_type', models.TextField(help_text="Type of event (e.g., 'user_liked', 'user_skipped')", verbose_name='Event Type')),
                ('event_details', models.JSONField(blank=True, help_text='Details about the event (e.g., timestamp, heart rate)', null=True, verbose_name='Event Details')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the feedback was created', verbose_name='Created At')),
                ('final_lyrics', models.ForeignKey(help_text='Final lyrics associated with this feedback', on_delete=django.db.models.deletion.CASCADE, related_name='lyric_adaptive_feedback', to='lyrics_generation.finallyrics', verbose_name='Final Lyrics')),
            ],
            options={
                'verbose_name': 'Lyric Adaptive Feedback',
                'verbose_name_plural': 'Lyric Adaptive Feedback',
            },
        ),
        migrations.CreateModel(
            name='CollaboratorPresence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('cursor_position', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('connected_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborator_presence', to='lyrics_generation.collaborativelyricsession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Collaborator Presence',
                'verbose_name_plural': 'Collaborator Presences',
            },
        ),
        migrations.AddField(
            model_name='collaborativelyricsession',
            name='final_lyrics',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborative_sessions', to='lyrics_generation.finallyrics'),
        ),
        migrations.AddField(
            model_name='collaborativelyricsession',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_lyric_sessions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CollaborativeEdit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('edit_type', models.CharField(choices=[('insert', 'Insert'), ('delete', 'Delete'), ('replace', 'Replace')], max_length=20)),
                ('position', models.IntegerField()),
                ('length', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborative_edits', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborative_edits', to='lyrics_generation.collaborativelyricsession')),
            ],
            options={
                'verbose_name': 'Collaborative Edit',
                'verbose_name_plural': 'Collaborative Edits',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='LyricVrArSettings',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('vr_ar_config', models.JSONField(blank=True, help_text='VR/AR configuration (e.g., environment, text style, position)', null=True, verbose_name='VR/AR Configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the settings were created', verbose_name='Created At')),
                ('final_lyrics', models.ForeignKey(help_text='Final lyrics associated with these settings', on_delete=django.db.models.deletion.CASCADE, related_name='lyric_vr_ar_settings', to='lyrics_generation.finallyrics', verbose_name='Final Lyrics')),
            ],
            options={
                'verbose_name': 'Lyric VR/AR Settings',
                'verbose_name_plural': 'Lyric VR/AR Settings',
                'indexes': [models.Index(fields=['vr_ar_config'], name='idx_lva_conf')],
            },
        ),
        migrations.AddConstraint(
            model_name='lyrictimeline',
            constraint=models.CheckConstraint(check=models.Q(('start_time_seconds__gte', 0)), name='start_time_seconds_positive'),
        ),
        migrations.AddConstraint(
            model_name='lyrictimeline',
            constraint=models.CheckConstraint(check=models.Q(('end_time_seconds__gte', 0)), name='end_time_seconds_positive'),
        ),
        migrations.AddConstraint(
            model_name='lyrictimeline',
            constraint=models.CheckConstraint(check=models.Q(('end_time_seconds__gte', models.F('start_time_seconds'))), name='end_time_after_start'),
        ),
        migrations.AddConstraint(
            model_name='lyricsignature',
            constraint=models.UniqueConstraint(fields=('final_lyrics',), name='unique_final_lyrics_signature'),
        ),
        migrations.AddIndex(
            model_name='lyricsharelink',
            index=models.Index(fields=['token'], name='idx_share_token'),
        ),
        migrations.AddIndex(
            model_name='lyricsharelink',
            index=models.Index(fields=['expires_at'], name='idx_share_expires'),
        ),
        migrations.AddIndex(
            model_name='lyricprompt',
            index=models.Index(fields=['user'], name='idx_lp_uid'),
        ),
        migrations.AddIndex(
            model_name='lyricprompt',
            index=models.Index(fields=['influencer'], name='idx_lp_infl'),
        ),
        migrations.AddIndex(
            model_name='lyricmodelversion',
            index=models.Index(fields=['embeddings'], name='idx_lm_emb'),
        ),
        migrations.AddIndex(
            model_name='lyricadaptivefeedback',
            index=models.Index(fields=['event_details'], name='idx_laf_det'),
        ),
        migrations.AddIndex(
            model_name='finallyrics',
            index=models.Index(fields=['user'], name='idx_fl_uid'),
        ),
        migrations.AddIndex(
            model_name='finallyrics',
            index=models.Index(fields=['lyrics_content'], name='idx_fl_cont'),
        ),
        migrations.AddIndex(
            model_name='collaboratorpresence',
            index=models.Index(fields=['last_seen'], name='idx_collab_last_seen'),
        ),
        migrations.AddIndex(
            model_name='collaboratorpresence',
            index=models.Index(fields=['is_active'], name='idx_collab_is_active'),
        ),
        migrations.AlterUniqueTogether(
            name='collaboratorpresence',
            unique_together={('session', 'user')},
        ),
        migrations.AddIndex(
            model_name='collaborativelyricsession',
            index=models.Index(fields=['owner'], name='idx_collab_owner'),
        ),
        migrations.AddIndex(
            model_name='collaborativelyricsession',
            index=models.Index(fields=['is_active'], name='idx_collab_active'),
        ),
        migrations.AddIndex(
            model_name='collaborativeedit',
            index=models.Index(fields=['session', 'created_at'], name='idx_collab_edit_time'),
        ),
    ]
