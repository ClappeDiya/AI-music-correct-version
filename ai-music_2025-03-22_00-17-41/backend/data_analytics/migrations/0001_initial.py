# Generated by Django 4.2.9 on 2025-02-12 17:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('experiment_name', models.TextField(verbose_name='Experiment Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('variants', models.JSONField(blank=True, null=True, verbose_name='Variants')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_experiments', to=settings.AUTH_USER_MODEL)),
                ('group_access', models.ManyToManyField(blank=True, related_name='accessible_experiments', to='auth.group')),
            ],
            options={
                'verbose_name': 'Experiment',
                'verbose_name_plural': 'Experiments',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('genre_name', models.TextField(unique=True, verbose_name='Genre Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='analytics_created_genres', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.TextField(verbose_name='Track Title')),
                ('artist', models.TextField(verbose_name='Artist')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tracks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Track',
                'verbose_name_plural': 'Tracks',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('region_code', models.TextField(unique=True, verbose_name='Region Code')),
                ('region_name', models.TextField(blank=True, null=True, verbose_name='Region Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_regions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeGraphNode',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('node_type', models.TextField(verbose_name='Node Type')),
                ('node_ref_id', models.BigIntegerField(blank=True, null=True, verbose_name='Node Reference ID')),
                ('properties', models.JSONField(blank=True, null=True, verbose_name='Properties')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_nodes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Knowledge Graph Node',
                'verbose_name_plural': 'Knowledge Graph Nodes',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeGraphEdge',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('edge_type', models.TextField(verbose_name='Edge Type')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Weight')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_edges', to=settings.AUTH_USER_MODEL)),
                ('from_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_edges', to='data_analytics.knowledgegraphnode', verbose_name='From Node')),
                ('to_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_edges', to='data_analytics.knowledgegraphnode', verbose_name='To Node')),
            ],
            options={
                'verbose_name': 'Knowledge Graph Edge',
                'verbose_name_plural': 'Knowledge Graph Edges',
            },
        ),
        migrations.CreateModel(
            name='GeographicInsight',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('insight_data', models.JSONField(blank=True, null=True, verbose_name='Insight Data')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_analytics.region', verbose_name='Region')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_insights', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Geographic Insight',
                'verbose_name_plural': 'Geographic Insights',
            },
        ),
        migrations.CreateModel(
            name='GenreTrend',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('trend_data', models.JSONField(blank=True, null=True, verbose_name='Trend Data')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_analytics.genre', verbose_name='Genre')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_trends', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Genre Trend',
                'verbose_name_plural': 'Genre Trends',
            },
        ),
        migrations.CreateModel(
            name='GenreMixingSession',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('failed', 'Failed')], max_length=20, verbose_name='Status')),
                ('genres', models.JSONField(verbose_name='Genres')),
                ('duration', models.IntegerField(verbose_name='Duration')),
                ('output_format', models.CharField(choices=[('wav', 'WAV'), ('mp3', 'MP3'), ('midi', 'MIDI')], max_length=10, verbose_name='Output Format')),
                ('analysis_results', models.JSONField(verbose_name='Analysis Results')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Genre Mixing Session',
                'verbose_name_plural': 'Genre Mixing Sessions',
            },
        ),
        migrations.CreateModel(
            name='FederatedModelUpdate',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('update_data', models.JSONField(blank=True, null=True, verbose_name='Update Data')),
                ('round_number', models.IntegerField(verbose_name='Round Number')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('validation_status', models.CharField(choices=[('pending', 'Pending'), ('validated', 'Validated'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('validated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validated_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Federated Model Update',
                'verbose_name_plural': 'Federated Model Updates',
            },
        ),
        migrations.CreateModel(
            name='ExperimentAssignment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('assigned_variant', models.TextField(blank=True, null=True, verbose_name='Assigned Variant')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, verbose_name='Assigned At')),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_experiments', to=settings.AUTH_USER_MODEL)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_analytics.experiment', verbose_name='Experiment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Experiment Assignment',
                'verbose_name_plural': 'Experiment Assignments',
            },
        ),
        migrations.CreateModel(
            name='DashboardSetting',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('settings', models.JSONField(blank=True, null=True, verbose_name='Settings')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Dashboard Setting',
                'verbose_name_plural': 'Dashboard Settings',
            },
        ),
        migrations.CreateModel(
            name='BehaviorTriggeredOverlay',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('trigger_type', models.CharField(max_length=100, verbose_name='Trigger Type')),
                ('conditions', models.JSONField(verbose_name='Conditions')),
                ('overlay', models.JSONField(verbose_name='Overlay')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Behavior Triggered Overlay',
                'verbose_name_plural': 'Behavior Triggered Overlays',
            },
        ),
        migrations.CreateModel(
            name='UserPreferenceProfile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('preference_vector', models.BinaryField(blank=True, null=True, verbose_name='Preference Vector')),
                ('metadata', models.JSONField(blank=True, null=True, verbose_name='Metadata')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Preference Profile',
                'verbose_name_plural': 'User Preference Profiles',
                'indexes': [models.Index(fields=['user'], name='data_analyt_user_id_b14e2d_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserBehaviorEvent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_type', models.TextField(verbose_name='Event Type')),
                ('related_track_id', models.BigIntegerField(blank=True, null=True, verbose_name='Related Track ID')),
                ('related_artist_id', models.BigIntegerField(blank=True, null=True, verbose_name='Related Artist ID')),
                ('event_metadata', models.JSONField(blank=True, null=True, verbose_name='Event Metadata')),
                ('occurred_at', models.DateTimeField(auto_now_add=True, verbose_name='Occurred At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Behavior Event',
                'verbose_name_plural': 'User Behavior Events',
                'indexes': [models.Index(fields=['user', 'event_type', 'occurred_at'], name='data_analyt_user_id_f4610a_idx'), models.Index(fields=['related_track_id', 'occurred_at'], name='data_analyt_related_13ca31_idx')],
            },
        ),
        migrations.CreateModel(
            name='TrackAnalyticsAggregate',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('aggregate_data', models.JSONField(blank=True, null=True, verbose_name='Aggregate Data')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_analytics.track', verbose_name='Track')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Track Analytics Aggregate',
                'verbose_name_plural': 'Track Analytics Aggregates',
                'indexes': [models.Index(fields=['track', 'last_updated'], name='data_analyt_track_i_c15c89_idx')],
            },
        ),
        migrations.CreateModel(
            name='StreamingOffset',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('source_name', models.TextField(verbose_name='Source Name')),
                ('partition_id', models.IntegerField(verbose_name='Partition ID')),
                ('offset_position', models.BigIntegerField(verbose_name='Offset Position')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_offsets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Streaming Offset',
                'verbose_name_plural': 'Streaming Offsets',
                'indexes': [models.Index(fields=['source_name', 'updated_at'], name='data_analyt_source__a33b24_idx')],
                'unique_together': {('source_name', 'partition_id')},
            },
        ),
        migrations.CreateModel(
            name='RecommendationSet',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('recommendation_data', models.JSONField(blank=True, null=True, verbose_name='Recommendation Data')),
                ('generated_at', models.DateTimeField(auto_now_add=True, verbose_name='Generated At')),
                ('generated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_recommendations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Recommendation Set',
                'verbose_name_plural': 'Recommendation Sets',
                'indexes': [models.Index(fields=['user', 'generated_at'], name='data_analyt_user_id_846631_idx')],
            },
        ),
        migrations.CreateModel(
            name='PredictivePreferenceModel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('model_version', models.CharField(max_length=50, verbose_name='Model Version')),
                ('predictions', models.JSONField(verbose_name='Predictions')),
                ('last_updated', models.DateTimeField(verbose_name='Last Updated')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Predictive Preference Model',
                'verbose_name_plural': 'Predictive Preference Models',
                'indexes': [models.Index(fields=['user', 'model_version'], name='data_analyt_user_id_80be3b_idx')],
            },
        ),
        migrations.CreateModel(
            name='PredictivePreferenceEvent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_type', models.CharField(max_length=100, verbose_name='Event Type')),
                ('prediction', models.JSONField(verbose_name='Prediction')),
                ('context', models.JSONField(verbose_name='Context')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Predictive Preference Event',
                'verbose_name_plural': 'Predictive Preference Events',
                'indexes': [models.Index(fields=['user', 'event_type', 'created_at'], name='data_analyt_user_id_914f5e_idx')],
            },
        ),
        migrations.CreateModel(
            name='PredictiveModelOutput',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('prediction_data', models.JSONField(blank=True, null=True, verbose_name='Prediction Data')),
                ('model_version', models.TextField(verbose_name='Model Version')),
                ('predicted_at', models.DateTimeField(auto_now_add=True, verbose_name='Predicted At')),
                ('predicted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_predictions', to=settings.AUTH_USER_MODEL)),
                ('track', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='data_analytics.track', verbose_name='Track')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Predictive Model Output',
                'verbose_name_plural': 'Predictive Model Outputs',
                'indexes': [models.Index(fields=['user', 'track', 'predicted_at'], name='data_analyt_user_id_c5f964_idx')],
            },
        ),
        migrations.CreateModel(
            name='PersonaFusion',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('persona_type', models.CharField(max_length=100, verbose_name='Persona Type')),
                ('preferences', models.JSONField(verbose_name='Preferences')),
                ('active_timeframe', models.JSONField(verbose_name='Active Timeframe')),
                ('settings', models.JSONField(verbose_name='Settings')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Persona Fusion',
                'verbose_name_plural': 'Persona Fusions',
                'indexes': [models.Index(fields=['user', 'persona_type'], name='data_analyt_user_id_a3187a_idx')],
            },
        ),
        migrations.CreateModel(
            name='MultiUserComposite',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('composite_type', models.CharField(max_length=100, verbose_name='Composite Type')),
                ('weights', models.JSONField(verbose_name='Weights')),
                ('settings', models.JSONField(verbose_name='Settings')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('users', models.ManyToManyField(related_name='composites', to=settings.AUTH_USER_MODEL, verbose_name='Users')),
            ],
            options={
                'verbose_name': 'Multi-User Composite',
                'verbose_name_plural': 'Multi-User Composites',
                'indexes': [models.Index(fields=['composite_type', 'status'], name='data_analyt_composi_72242c_idx')],
            },
        ),
        migrations.CreateModel(
            name='MixingAnalytics',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('session_id', models.TextField(verbose_name='Session ID')),
                ('event_type', models.CharField(choices=[('mix_started', 'Mix Started'), ('mix_completed', 'Mix Completed'), ('mix_saved', 'Mix Saved'), ('mix_shared', 'Mix Shared')], max_length=50, verbose_name='Event Type')),
                ('duration', models.IntegerField(verbose_name='Duration')),
                ('genre_weights', models.JSONField(verbose_name='Genre Weights')),
                ('effects_used', models.JSONField(verbose_name='Effects Used')),
                ('performance_metrics', models.JSONField(verbose_name='Performance Metrics')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Mixing Analytics',
                'verbose_name_plural': 'Mixing Analytics',
                'indexes': [models.Index(fields=['user', 'session_id', 'event_type'], name='data_analyt_user_id_9b3b5e_idx'), models.Index(fields=['created_at'], name='data_analyt_created_7bbebc_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='knowledgegraphnode',
            index=models.Index(fields=['node_type', 'created_at'], name='data_analyt_node_ty_d18d88_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgegraphedge',
            index=models.Index(fields=['from_node', 'to_node', 'edge_type'], name='data_analyt_from_no_bd2dc8_idx'),
        ),
        migrations.AddIndex(
            model_name='geographicinsight',
            index=models.Index(fields=['region', 'last_updated'], name='data_analyt_region__ff7a10_idx'),
        ),
        migrations.AddIndex(
            model_name='genretrend',
            index=models.Index(fields=['genre', 'last_updated'], name='data_analyt_genre_i_2d135e_idx'),
        ),
        migrations.AddIndex(
            model_name='genremixingsession',
            index=models.Index(fields=['user', 'status', 'created_at'], name='data_analyt_user_id_60e140_idx'),
        ),
        migrations.AddIndex(
            model_name='federatedmodelupdate',
            index=models.Index(fields=['user', 'round_number', 'validation_status'], name='data_analyt_user_id_5157ea_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='federatedmodelupdate',
            unique_together={('user', 'round_number')},
        ),
        migrations.AddIndex(
            model_name='experimentassignment',
            index=models.Index(fields=['experiment', 'user', 'assigned_at'], name='data_analyt_experim_3984d7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='experimentassignment',
            unique_together={('experiment', 'user')},
        ),
        migrations.AddIndex(
            model_name='experiment',
            index=models.Index(fields=['experiment_name', 'created_at'], name='data_analyt_experim_e83ad0_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboardsetting',
            index=models.Index(fields=['user'], name='data_analyt_user_id_5bbe82_idx'),
        ),
        migrations.AddIndex(
            model_name='behaviortriggeredoverlay',
            index=models.Index(fields=['user', 'trigger_type', 'active'], name='data_analyt_user_id_6f29ec_idx'),
        ),
    ]
