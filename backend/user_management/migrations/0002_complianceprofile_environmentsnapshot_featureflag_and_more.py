# Generated by Django 4.2.9 on 2025-02-24 06:09

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import user_management.mixins
import user_management.models


class Migration(migrations.Migration):

    dependencies = [
        ('user_management', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ComplianceProfile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('region_code', models.CharField(max_length=10, unique=True)),
                ('policy_name', models.CharField(max_length=255)),
                ('policy_version', models.CharField(max_length=50)),
                ('effective_date', models.DateField()),
                ('data_retention_days', models.PositiveIntegerField()),
                ('requires_consent', models.BooleanField(default=True)),
                ('consent_text', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Compliance Profile',
                'verbose_name_plural': 'Compliance Profiles',
                'ordering': ['region_code'],
            },
        ),
        migrations.CreateModel(
            name='EnvironmentSnapshot',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('snapshot_data', models.JSONField()),
                ('is_encrypted', models.BooleanField(default=False)),
                ('encryption_key', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-created_at'],
            },
            bases=(user_management.mixins.UserResourceMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FeatureFlag',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('enabled_for_all', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ProfileFusion',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('fusion_parameters', models.JSONField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Profile Fusion',
                'verbose_name_plural': 'Profile Fusions',
            },
        ),
        migrations.CreateModel(
            name='ProfileHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('version', models.PositiveIntegerField()),
                ('settings_snapshot', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Profile History',
                'verbose_name_plural': 'Profile Histories',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('change_type', models.CharField(choices=[('CREATED', 'Created'), ('UPDATED', 'Updated'), ('CANCELLED', 'Cancelled'), ('RENEWED', 'Renewed')], default='CREATED', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('duration_days', models.PositiveIntegerField(default=30)),
                ('features', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='UsageForecast',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('forecast_date', models.DateField()),
                ('predicted_usage', models.JSONField()),
                ('confidence_level', models.FloatField()),
                ('recommended_action', models.CharField(max_length=100)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Usage Forecast',
                'verbose_name_plural': 'Usage Forecasts',
                'ordering': ['-forecast_date'],
            },
        ),
        migrations.CreateModel(
            name='UserComplianceEvent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_type', models.CharField(max_length=50)),
                ('event_date', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'User Compliance Event',
                'verbose_name_plural': 'User Compliance Events',
                'ordering': ['-event_date'],
            },
        ),
        migrations.CreateModel(
            name='UserIdentityBridge',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('identity_type', models.CharField(choices=[('SSO', 'Single Sign-On'), ('BLOCKCHAIN', 'Blockchain-based ID'), ('OAUTH', 'OAuth Provider'), ('CUSTOM', 'Custom Identity Provider')], max_length=20)),
                ('provider_name', models.CharField(max_length=100)),
                ('is_enabled', models.BooleanField(default=False)),
                ('config_data', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Identity Bridge',
                'verbose_name_plural': 'User Identity Bridges',
            },
        ),
        migrations.CreateModel(
            name='UserInteraction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('target_content', models.CharField(blank=True, max_length=100, null=True)),
                ('interaction_type', models.CharField(choices=[('LIKE', 'Like'), ('FOLLOW', 'Follow'), ('PLAY', 'Play'), ('SHARE', 'Share'), ('DOWNLOAD', 'Download')], max_length=20)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('metadata', models.JSONField(default=dict)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('current_usage', models.JSONField(default=dict)),
                ('last_usage_check', models.DateTimeField(blank=True, null=True)),
                ('auto_scaling_enabled', models.BooleanField(default=True)),
                ('scaling_history', models.JSONField(default=list)),
            ],
            bases=(user_management.mixins.UserResourceMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserTranslation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('original_text', models.TextField()),
                ('translated_text', models.TextField()),
                ('target_language', models.CharField(choices=[('en', 'English'), ('fr', 'Français'), ('es', 'Español'), ('de', 'Deutsch'), ('zh', '中文')], max_length=2)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('MERGED', 'Merged')], default='PENDING', max_length=10)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('review_notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'User Translation',
                'verbose_name_plural': 'User Translations',
            },
        ),
        migrations.RenameIndex(
            model_name='userprofile',
            new_name='user_manage_user_id_961b9b_idx',
            old_name='user_profile_user_type_idx',
        ),
        migrations.RenameIndex(
            model_name='userprofile',
            new_name='user_manage_is_acti_67547c_idx',
            old_name='user_profile_active_idx',
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='settings',
            field=models.JSONField(default=user_management.models.get_default_settings),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='user_management.user'),
        ),
        migrations.AddConstraint(
            model_name='userprofile',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='unique_profile_name'),
        ),
        migrations.AddField(
            model_name='usertranslation',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_translations', to='user_management.user'),
        ),
        migrations.AddField(
            model_name='usertranslation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='user_management.user'),
        ),
        migrations.AddField(
            model_name='usersubscription',
            name='plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_management.subscriptionplan'),
        ),
        migrations.AddField(
            model_name='usersubscription',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_management.user'),
        ),
        migrations.AddField(
            model_name='userinteraction',
            name='target_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_interactions', to='user_management.user'),
        ),
        migrations.AddField(
            model_name='userinteraction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='user_management.user'),
        ),
        migrations.AddField(
            model_name='useridentitybridge',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identity_bridges', to='user_management.user'),
        ),
        migrations.AddField(
            model_name='usercomplianceevent',
            name='compliance_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_management.complianceprofile'),
        ),
        migrations.AddField(
            model_name='usercomplianceevent',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_management.user'),
        ),
        migrations.AddField(
            model_name='usageforecast',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_management.user'),
        ),
        migrations.AddField(
            model_name='subscriptionhistory',
            name='changed_by',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='user_management.user'),
        ),
        migrations.AddField(
            model_name='subscriptionhistory',
            name='subscription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_management.usersubscription'),
        ),
        migrations.AddField(
            model_name='profilehistory',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='user_management.userprofile'),
        ),
        migrations.AddField(
            model_name='profilehistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_history', to='user_management.user'),
        ),
        migrations.AddField(
            model_name='profilefusion',
            name='result_profile',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result_fusion', to='user_management.userprofile'),
        ),
        migrations.AddField(
            model_name='profilefusion',
            name='source_profiles',
            field=models.ManyToManyField(related_name='source_fusions', to='user_management.userprofile'),
        ),
        migrations.AddField(
            model_name='profilefusion',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fusions', to='user_management.user'),
        ),
        migrations.AddField(
            model_name='featureflag',
            name='enabled_plans',
            field=models.ManyToManyField(blank=True, to='user_management.subscriptionplan'),
        ),
        migrations.AddField(
            model_name='environmentsnapshot',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_management.user'),
        ),
        migrations.AddIndex(
            model_name='complianceprofile',
            index=models.Index(fields=['region_code', 'is_active'], name='user_manage_region__74b20d_idx'),
        ),
        migrations.AddField(
            model_name='user',
            name='compliance_profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='user_management.complianceprofile'),
        ),
        migrations.AddIndex(
            model_name='usertranslation',
            index=models.Index(fields=['user', 'status'], name='user_manage_user_id_ccb3bc_idx'),
        ),
        migrations.AddIndex(
            model_name='usertranslation',
            index=models.Index(fields=['target_language', 'status'], name='user_manage_target__9d2e49_idx'),
        ),
        migrations.AddConstraint(
            model_name='usertranslation',
            constraint=models.UniqueConstraint(fields=('user', 'original_text', 'target_language'), name='unique_user_translation'),
        ),
        migrations.AddIndex(
            model_name='userinteraction',
            index=models.Index(fields=['user', 'interaction_type'], name='user_manage_user_id_64e707_idx'),
        ),
        migrations.AddIndex(
            model_name='userinteraction',
            index=models.Index(fields=['target_user', 'interaction_type'], name='user_manage_target__8ba4b6_idx'),
        ),
        migrations.AddIndex(
            model_name='userinteraction',
            index=models.Index(fields=['target_content', 'interaction_type'], name='user_manage_target__18dbd3_idx'),
        ),
        migrations.AddIndex(
            model_name='useridentitybridge',
            index=models.Index(fields=['user', 'identity_type'], name='user_manage_user_id_4e126c_idx'),
        ),
        migrations.AddIndex(
            model_name='useridentitybridge',
            index=models.Index(fields=['is_enabled'], name='user_manage_is_enab_b47e2a_idx'),
        ),
        migrations.AddConstraint(
            model_name='useridentitybridge',
            constraint=models.UniqueConstraint(fields=('user', 'identity_type', 'provider_name'), name='unique_user_identity'),
        ),
        migrations.AddIndex(
            model_name='usercomplianceevent',
            index=models.Index(fields=['user', 'event_date'], name='user_manage_user_id_52ab68_idx'),
        ),
        migrations.AddIndex(
            model_name='usercomplianceevent',
            index=models.Index(fields=['compliance_profile', 'event_date'], name='user_manage_complia_2f21aa_idx'),
        ),
        migrations.AddIndex(
            model_name='usageforecast',
            index=models.Index(fields=['user', 'forecast_date'], name='user_manage_user_id_9e16be_idx'),
        ),
        migrations.AddIndex(
            model_name='profilehistory',
            index=models.Index(fields=['user', 'profile', 'version'], name='user_manage_user_id_e2f95f_idx'),
        ),
        migrations.AddConstraint(
            model_name='profilehistory',
            constraint=models.UniqueConstraint(fields=('profile', 'version'), name='unique_profile_version'),
        ),
        migrations.AddIndex(
            model_name='profilefusion',
            index=models.Index(fields=['user', 'status'], name='user_manage_user_id_4e0c0d_idx'),
        ),
        migrations.AddIndex(
            model_name='environmentsnapshot',
            index=models.Index(fields=['user', 'created_at'], name='user_manage_user_id_dd4b76_idx'),
        ),
    ]
