# Generated by Django 4.2.9 on 2025-02-12 17:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('user_management', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIDJFeedback',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('feedback_type', models.TextField(blank=True, help_text='Type of feedback (like, dislike, skip)', null=True, verbose_name='Feedback Type')),
                ('feedback_notes', models.TextField(blank=True, help_text='Additional notes about the feedback', null=True, verbose_name='Feedback Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the feedback was created', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'AI DJ Feedback',
                'verbose_name_plural': 'AI DJ Feedbacks',
                'db_table': 'ai_dj_feedback',
            },
        ),
        migrations.CreateModel(
            name='AIDJPlayHistory',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('played_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the track was played', verbose_name='Played At')),
            ],
            options={
                'verbose_name': 'AI DJ Play History',
                'verbose_name_plural': 'AI DJ Play Histories',
                'db_table': 'ai_dj_play_history',
            },
        ),
        migrations.CreateModel(
            name='AIDJRecommendation',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('recommendation_data', models.JSONField(blank=True, help_text='JSON object storing recommendation data', null=True, verbose_name='Recommendation Data')),
                ('recommended_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the recommendation was made', verbose_name='Recommended At')),
            ],
            options={
                'verbose_name': 'AI DJ Recommendation',
                'verbose_name_plural': 'AI DJ Recommendations',
                'db_table': 'ai_dj_recommendations',
            },
        ),
        migrations.CreateModel(
            name='AIDJSavedSet',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('set_name', models.TextField(blank=True, help_text='Name of the saved set', null=True, verbose_name='Set Name')),
                ('track_list', models.JSONField(blank=True, help_text='JSON object storing the list of tracks in the set', null=True, verbose_name='Track List')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the set was created', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'AI DJ Saved Set',
                'verbose_name_plural': 'AI DJ Saved Sets',
                'db_table': 'ai_dj_saved_sets',
            },
        ),
        migrations.CreateModel(
            name='AIDJSession',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('mood_settings', models.JSONField(blank=True, help_text='JSON object storing mood settings', null=True, verbose_name='Mood Settings')),
                ('last_voice_command', models.TextField(blank=True, help_text='Last voice command given by the user', null=True, verbose_name='Last Voice Command')),
                ('command_language', models.CharField(default='en', help_text='Language of the last voice command (ISO 639-1)', max_length=10, verbose_name='Command Language')),
                ('preferred_language', models.CharField(default='en', help_text="User's preferred language for voice commands (ISO 639-1)", max_length=10, verbose_name='Preferred Language')),
                ('voice_style', models.CharField(choices=[('formal', 'Formal'), ('casual', 'Casual'), ('energetic', 'Energetic'), ('calm', 'Calm')], default='casual', help_text='Preferred style of DJ announcements', max_length=20, verbose_name='Voice Style')),
                ('voice_accent', models.CharField(blank=True, help_text='Preferred regional accent for TTS', max_length=20, null=True, verbose_name='Voice Accent')),
                ('announcement_frequency', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', help_text='How often the DJ should make announcements', max_length=20, verbose_name='Announcement Frequency')),
                ('enable_announcements', models.BooleanField(default=True, help_text='Whether DJ announcements are enabled', verbose_name='Enable Announcements')),
                ('last_announcement', models.TextField(blank=True, help_text='Last announcement made by the DJ', null=True, verbose_name='Last Announcement')),
                ('announcement_templates', models.JSONField(default=dict, help_text='Language-specific templates for announcements', verbose_name='Announcement Templates')),
                ('supported_languages', models.JSONField(default=list, help_text='List of languages supported for voice commands', verbose_name='Supported Languages')),
                ('command_mappings', models.JSONField(default=dict, help_text='Multilingual command mappings and their standardized actions', verbose_name='Command Mappings')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the session was last updated', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'AI DJ Session',
                'verbose_name_plural': 'AI DJ Sessions',
                'db_table': 'ai_dj_sessions',
            },
        ),
        migrations.CreateModel(
            name='BehaviorOverlay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger_type', models.CharField(max_length=50)),
                ('conditions', models.JSONField()),
                ('overlay_content', models.JSONField()),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventBasedPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=50)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('preferences', models.JSONField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='IdentityBridge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(max_length=100)),
                ('external_id', models.CharField(max_length=255)),
                ('access_token', models.CharField(max_length=512)),
                ('refresh_token', models.CharField(blank=True, max_length=512, null=True)),
                ('token_expires_at', models.DateTimeField(null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='IdentityVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_method', models.CharField(choices=[('email', 'Email Verification'), ('phone', 'Phone Verification'), ('document', 'Document Verification'), ('two_factor', 'Two-Factor Authentication')], max_length=50)),
                ('verified_at', models.DateTimeField(null=True)),
                ('verification_data', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='LoginSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100, unique=True)),
                ('device_info', models.JSONField()),
                ('ip_address', models.GenericIPAddressField()),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='PreferenceExternalization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(max_length=100)),
                ('sync_enabled', models.BooleanField(default=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_frequency', models.IntegerField(default=24)),
                ('preferences_data', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('title', models.TextField(help_text='Title of the track', verbose_name='Title')),
                ('artist', models.TextField(blank=True, help_text='Artist of the track', null=True, verbose_name='Artist')),
                ('album', models.TextField(blank=True, help_text='Album of the track', null=True, verbose_name='Album')),
                ('duration_seconds', models.IntegerField(blank=True, help_text='Duration of the track in seconds', null=True, verbose_name='Duration (seconds)')),
                ('genre', models.TextField(blank=True, help_text='Genre of the track', null=True, verbose_name='Genre')),
                ('original_language', models.CharField(default='en', help_text='ISO 639-1 language code of the original track', max_length=10, verbose_name='Original Language')),
                ('available_translations', models.JSONField(default=list, help_text='List of available language codes for this track', verbose_name='Available Translations')),
                ('metadata', models.JSONField(blank=True, help_text='Additional track metadata like mood, energy, etc.', null=True, verbose_name='Additional Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Track',
                'verbose_name_plural': 'Tracks',
                'db_table': 'tracks',
            },
        ),
        migrations.CreateModel(
            name='UserCurrency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency_code', models.CharField(max_length=3)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User currencies',
            },
        ),
        migrations.CreateModel(
            name='TrackTranslation',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('language_code', models.CharField(help_text='ISO 639-1 language code', max_length=10, verbose_name='Language Code')),
                ('title', models.TextField(verbose_name='Translated Title')),
                ('artist', models.TextField(blank=True, null=True, verbose_name='Translated Artist Name')),
                ('album', models.TextField(blank=True, null=True, verbose_name='Translated Album Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Translated Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='ai_dj.track')),
            ],
            options={
                'verbose_name': 'Track Translation',
                'verbose_name_plural': 'Track Translations',
                'db_table': 'track_translations',
            },
        ),
        migrations.CreateModel(
            name='TrackLyrics',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('language_code', models.CharField(help_text='ISO 639-1 language code', max_length=10, verbose_name='Language Code')),
                ('is_original', models.BooleanField(default=False, verbose_name='Is Original Language')),
                ('lyrics_text', models.TextField(verbose_name='Lyrics Text')),
                ('lyrics_with_timestamps', models.JSONField(blank=True, help_text='JSON array of {start_time, end_time, text} objects', null=True, verbose_name='Timestamped Lyrics')),
                ('translation_source', models.CharField(blank=True, max_length=50, null=True, verbose_name='Translation Source')),
                ('verified', models.BooleanField(default=False, verbose_name='Verified Translation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lyrics', to='ai_dj.track')),
            ],
            options={
                'verbose_name': 'Track Lyrics',
                'verbose_name_plural': 'Track Lyrics',
                'db_table': 'track_lyrics',
            },
        ),
        migrations.AddIndex(
            model_name='track',
            index=models.Index(fields=['original_language'], name='tracks_origina_31b46c_idx'),
        ),
        migrations.AddField(
            model_name='preferenceexternalization',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='loginsession',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_sessions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='identityverification',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='identity_verification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='identitybridge',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identity_bridges', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventbasedpreference',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='behavioroverlay',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='aidjsession',
            name='user',
            field=models.ForeignKey(help_text='User associated with the session', on_delete=django.db.models.deletion.CASCADE, related_name='ai_dj_sessions', to='user_management.user', verbose_name='User'),
        ),
        migrations.AddField(
            model_name='aidjsavedset',
            name='user',
            field=models.ForeignKey(help_text='User who saved the set', on_delete=django.db.models.deletion.CASCADE, related_name='ai_dj_saved_sets', to='user_management.user', verbose_name='User'),
        ),
        migrations.AddField(
            model_name='aidjrecommendation',
            name='user',
            field=models.ForeignKey(help_text='User for whom the recommendation was made', on_delete=django.db.models.deletion.CASCADE, related_name='ai_dj_recommendations', to='user_management.user', verbose_name='User'),
        ),
        migrations.AddField(
            model_name='aidjplayhistory',
            name='track',
            field=models.ForeignKey(help_text='Track that was played', on_delete=django.db.models.deletion.RESTRICT, to='ai_dj.track', verbose_name='Track'),
        ),
        migrations.AddField(
            model_name='aidjplayhistory',
            name='user',
            field=models.ForeignKey(help_text='User who played the track', on_delete=django.db.models.deletion.CASCADE, related_name='ai_dj_play_histories', to='user_management.user', verbose_name='User'),
        ),
        migrations.AddField(
            model_name='aidjfeedback',
            name='recommendation',
            field=models.ForeignKey(blank=True, help_text='Recommendation that the feedback is about', null=True, on_delete=django.db.models.deletion.CASCADE, to='ai_dj.aidjrecommendation', verbose_name='Recommendation'),
        ),
        migrations.AddField(
            model_name='aidjfeedback',
            name='track',
            field=models.ForeignKey(blank=True, help_text='Track that the feedback is about', null=True, on_delete=django.db.models.deletion.RESTRICT, to='ai_dj.track', verbose_name='Track'),
        ),
        migrations.AddField(
            model_name='aidjfeedback',
            name='user',
            field=models.ForeignKey(help_text='User who provided the feedback', on_delete=django.db.models.deletion.CASCADE, related_name='ai_dj_feedbacks', to='user_management.user', verbose_name='User'),
        ),
        migrations.AddIndex(
            model_name='tracktranslation',
            index=models.Index(fields=['track', 'language_code'], name='track_trans_track_i_2998c8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tracktranslation',
            unique_together={('track', 'language_code')},
        ),
        migrations.AddIndex(
            model_name='tracklyrics',
            index=models.Index(fields=['track', 'language_code'], name='track_lyric_track_i_45b8f6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tracklyrics',
            unique_together={('track', 'language_code')},
        ),
        migrations.AlterUniqueTogether(
            name='preferenceexternalization',
            unique_together={('user', 'service_name')},
        ),
        migrations.AddIndex(
            model_name='loginsession',
            index=models.Index(fields=['user', 'is_active'], name='ai_dj_login_user_id_2490fb_idx'),
        ),
        migrations.AddIndex(
            model_name='loginsession',
            index=models.Index(fields=['session_id'], name='ai_dj_login_session_f83f68_idx'),
        ),
        migrations.AddIndex(
            model_name='identityverification',
            index=models.Index(fields=['user', 'is_verified'], name='ai_dj_ident_user_id_1baa67_idx'),
        ),
        migrations.AddIndex(
            model_name='identitybridge',
            index=models.Index(fields=['user', 'service_name'], name='ai_dj_ident_user_id_6fd56a_idx'),
        ),
        migrations.AddIndex(
            model_name='identitybridge',
            index=models.Index(fields=['external_id'], name='ai_dj_ident_externa_1f5d73_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='identitybridge',
            unique_together={('user', 'service_name', 'external_id')},
        ),
        migrations.AddIndex(
            model_name='aidjsession',
            index=models.Index(fields=['user'], name='idx_ai_dj_sessions_user'),
        ),
        migrations.AddIndex(
            model_name='aidjsavedset',
            index=models.Index(fields=['user'], name='idx_ai_dj_saved_sets_user'),
        ),
        migrations.AddIndex(
            model_name='aidjrecommendation',
            index=models.Index(fields=['user'], name='idx_ai_dj_recommendations_user'),
        ),
        migrations.AddIndex(
            model_name='aidjplayhistory',
            index=models.Index(fields=['user'], name='idx_ai_dj_play_history_user'),
        ),
        migrations.AddIndex(
            model_name='aidjfeedback',
            index=models.Index(fields=['user'], name='idx_ai_dj_feedback_user'),
        ),
    ]
