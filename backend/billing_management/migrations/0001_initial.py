# Generated by Django 4.2.9 on 2025-02-12 17:48

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Charge',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('stripe_charge_id', models.TextField(help_text='The unique Stripe charge ID.', unique=True, verbose_name='Stripe Charge ID')),
                ('amount_cents', models.IntegerField(help_text='The amount of the charge in cents.', verbose_name='Amount (cents)')),
                ('currency', models.TextField(help_text='The currency of the charge.', verbose_name='Currency')),
                ('charge_data', models.JSONField(blank=True, help_text='Charge details, receipt URL, payment method used.', null=True, verbose_name='Charge Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the charge was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Charge',
                'verbose_name_plural': 'Charges',
            },
        ),
        migrations.CreateModel(
            name='ComplianceAudit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('action', models.TextField(help_text='The action performed (e.g., encryption_key_rotated).', verbose_name='Action')),
                ('details', models.JSONField(blank=True, help_text='Additional details about the compliance action.', null=True, verbose_name='Details')),
                ('occurred_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the compliance action occurred.', verbose_name='Occurred At')),
            ],
            options={
                'verbose_name': 'Compliance Audit',
                'verbose_name_plural': 'Compliance Audits',
            },
        ),
        migrations.CreateModel(
            name='CurrencyExchangeLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('transaction_ref', models.TextField(blank=True, help_text='The reference for the transaction.', null=True, verbose_name='Transaction Reference')),
                ('from_currency', models.TextField(help_text='The currency being exchanged from.', verbose_name='From Currency')),
                ('to_currency', models.TextField(help_text='The currency being exchanged to.', verbose_name='To Currency')),
                ('rate', models.DecimalField(decimal_places=6, help_text='The exchange rate used.', max_digits=10, verbose_name='Exchange Rate')),
                ('applied_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the exchange was applied.', verbose_name='Applied At')),
            ],
            options={
                'verbose_name': 'Currency Exchange Log',
                'verbose_name_plural': 'Currency Exchange Logs',
            },
        ),
        migrations.CreateModel(
            name='DynamicPricingRule',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Rule Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('rule_type', models.CharField(max_length=50, verbose_name='Rule Type')),
                ('conditions', models.JSONField(default=dict, verbose_name='Conditions')),
                ('actions', models.JSONField(default=dict, verbose_name='Actions')),
            ],
            options={
                'verbose_name': 'Dynamic Pricing Rule',
                'verbose_name_plural': 'Dynamic Pricing Rules',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FraudDetectionLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('charge_id', models.BigIntegerField(blank=True, help_text='The ID of the charge associated with this fraud detection log.', null=True, verbose_name='Charge ID')),
                ('fraud_score', models.DecimalField(blank=True, decimal_places=2, help_text='The fraud score for the charge.', max_digits=5, null=True, verbose_name='Fraud Score')),
                ('analysis_data', models.JSONField(blank=True, help_text='Additional analysis data for the fraud detection.', null=True, verbose_name='Analysis Data')),
                ('logged_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the fraud detection log was created.', verbose_name='Logged At')),
            ],
            options={
                'verbose_name': 'Fraud Detection Log',
                'verbose_name_plural': 'Fraud Detection Logs',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('stripe_invoice_id', models.TextField(help_text='The unique Stripe invoice ID.', unique=True, verbose_name='Stripe Invoice ID')),
                ('amount_cents', models.IntegerField(help_text='The amount of the invoice in cents.', verbose_name='Amount (cents)')),
                ('currency', models.TextField(help_text='The currency of the invoice.', verbose_name='Currency')),
                ('status', models.TextField(help_text='The status of the invoice (e.g., paid, open, void).', verbose_name='Status')),
                ('invoice_data', models.JSONField(blank=True, help_text='Full invoice details from Stripe.', null=True, verbose_name='Invoice Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the invoice was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
            },
        ),
        migrations.CreateModel(
            name='MultiCurrencyInstallment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_id', models.BigIntegerField(blank=True, help_text='The ID of the user associated with this installment plan.', null=True, verbose_name='User ID')),
                ('base_amount_cents', models.IntegerField(help_text='The base amount of the installment plan in cents.', verbose_name='Base Amount (cents)')),
                ('currency', models.TextField(help_text='The currency of the installment plan.', verbose_name='Currency')),
                ('installment_schedule', models.JSONField(blank=True, help_text='The schedule of installments.', null=True, verbose_name='Installment Schedule')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the installment plan was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Multi-Currency Installment',
                'verbose_name_plural': 'Multi-Currency Installments',
            },
        ),
        migrations.CreateModel(
            name='PaymentAggregatorRouting',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('aggregator_name', models.TextField(help_text='The name of the payment aggregator.', verbose_name='Aggregator Name')),
                ('performance_metrics', models.JSONField(blank=True, help_text='Performance metrics for the payment aggregator.', null=True, verbose_name='Performance Metrics')),
                ('last_assessed', models.DateTimeField(auto_now=True, help_text='The date and time when the payment aggregator was last assessed.', verbose_name='Last Assessed')),
            ],
            options={
                'verbose_name': 'Payment Aggregator Routing',
                'verbose_name_plural': 'Payment Aggregator Routings',
            },
        ),
        migrations.CreateModel(
            name='PaymentDeviceConfig',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_id', models.BigIntegerField(blank=True, help_text='The ID of the user associated with this payment device configuration.', null=True, verbose_name='User ID')),
                ('device_type', models.TextField(help_text='The type of the payment device (e.g., wearable_watch).', verbose_name='Device Type')),
                ('device_settings', models.JSONField(blank=True, help_text='The settings for the payment device.', null=True, verbose_name='Device Settings')),
                ('configured_at', models.DateTimeField(auto_now=True, help_text='The date and time when the payment device was configured.', verbose_name='Configured At')),
            ],
            options={
                'verbose_name': 'Payment Device Configuration',
                'verbose_name_plural': 'Payment Device Configurations',
            },
        ),
        migrations.CreateModel(
            name='PaymentFederationLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('external_service_name', models.TextField(help_text='The name of the external service.', verbose_name='External Service Name')),
                ('federation_details', models.JSONField(blank=True, help_text='Additional details about the payment federation.', null=True, verbose_name='Federation Details')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the payment federation link was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Payment Federation Link',
                'verbose_name_plural': 'Payment Federation Links',
            },
        ),
        migrations.CreateModel(
            name='PaymentInsightWizard',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('wizard_config', models.JSONField(blank=True, help_text='Configuration data for the payment insight wizard.', null=True, verbose_name='Wizard Configuration')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the wizard configuration was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Payment Insight Wizard',
                'verbose_name_plural': 'Payment Insight Wizards',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_id', models.BigIntegerField(blank=True, help_text='The ID of the user associated with this payment method.', null=True, verbose_name='User ID')),
                ('stripe_customer_id', models.TextField(blank=True, help_text='The Stripe customer ID associated with the user.', null=True, verbose_name='Stripe Customer ID')),
                ('stripe_payment_method_id', models.TextField(blank=True, help_text='The Stripe payment method ID.', null=True, verbose_name='Stripe Payment Method ID')),
                ('method_metadata', models.JSONField(blank=True, help_text='Additional metadata about the payment method (e.g., card details).', null=True, verbose_name='Method Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the payment method was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Payment Method',
                'verbose_name_plural': 'Payment Methods',
            },
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('stripe_refund_id', models.TextField(help_text='The unique Stripe refund ID.', unique=True, verbose_name='Stripe Refund ID')),
                ('charge_id', models.BigIntegerField(help_text='The ID of the charge associated with this refund.', verbose_name='Charge ID')),
                ('amount_cents', models.IntegerField(help_text='The amount of the refund in cents.', verbose_name='Amount (cents)')),
                ('reason', models.TextField(blank=True, help_text='The reason for the refund.', null=True, verbose_name='Reason')),
                ('refund_data', models.JSONField(blank=True, help_text='Full refund details from Stripe.', null=True, verbose_name='Refund Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the refund was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Refund',
                'verbose_name_plural': 'Refunds',
            },
        ),
        migrations.CreateModel(
            name='RevenueForecast',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('forecast_period', models.TextField(help_text='The period for which the forecast is made (e.g., 2026-Q2).', verbose_name='Forecast Period')),
                ('forecast_data', models.JSONField(blank=True, help_text='The forecast data (e.g., expected revenue, confidence interval).', null=True, verbose_name='Forecast Data')),
                ('generated_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the forecast was generated.', verbose_name='Generated At')),
            ],
            options={
                'verbose_name': 'Revenue Forecast',
                'verbose_name_plural': 'Revenue Forecasts',
            },
        ),
        migrations.CreateModel(
            name='SeasonalPricingRule',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('trigger_conditions', models.JSONField(blank=True, help_text='The conditions that trigger the seasonal pricing rule.', null=True, verbose_name='Trigger Conditions')),
                ('pricing_adjustments', models.JSONField(blank=True, help_text='The pricing adjustments for the seasonal pricing rule.', null=True, verbose_name='Pricing Adjustments')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the seasonal pricing rule was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Seasonal Pricing Rule',
                'verbose_name_plural': 'Seasonal Pricing Rules',
            },
        ),
        migrations.CreateModel(
            name='SLADeposit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('deposit_amount_cents', models.IntegerField(help_text='The amount of the deposit in cents.', verbose_name='Deposit Amount (cents)')),
                ('conditions', models.JSONField(blank=True, help_text='The conditions for the deposit (e.g., required uptime).', null=True, verbose_name='Conditions')),
                ('escrow_status', models.TextField(blank=True, help_text='The status of the deposit (e.g., held, released, refunded).', null=True, verbose_name='Escrow Status')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the deposit was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'SLA Deposit',
                'verbose_name_plural': 'SLA Deposits',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('stripe_subscription_id', models.TextField(help_text='The unique Stripe subscription ID.', unique=True, verbose_name='Stripe Subscription ID')),
                ('plan_reference', models.TextField(blank=True, help_text='Reference to a subscription plan.', null=True, verbose_name='Plan Reference')),
                ('current_period_start', models.DateTimeField(blank=True, help_text='The start date and time of the current subscription period.', null=True, verbose_name='Current Period Start')),
                ('current_period_end', models.DateTimeField(blank=True, help_text='The end date and time of the current subscription period.', null=True, verbose_name='Current Period End')),
                ('subscription_data', models.JSONField(blank=True, help_text='Full subscription details from Stripe.', null=True, verbose_name='Subscription Data')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='TokenizedEntitlement',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('entitlement_token', models.TextField(help_text='A token representing a certain access right.', unique=True, verbose_name='Entitlement Token')),
                ('entitlement_details', models.JSONField(blank=True, help_text='Additional details about the entitlement.', null=True, verbose_name='Entitlement Details')),
                ('issued_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the entitlement was issued.', verbose_name='Issued At')),
            ],
            options={
                'verbose_name': 'Tokenized Entitlement',
                'verbose_name_plural': 'Tokenized Entitlements',
            },
        ),
        migrations.CreateModel(
            name='WebhookEvent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_type', models.TextField(help_text='The type of the webhook event (e.g., invoice.payment_succeeded).', verbose_name='Event Type')),
                ('event_payload', models.JSONField(help_text='The raw payload from Stripe.', verbose_name='Event Payload')),
                ('received_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the webhook event was received.', verbose_name='Received At')),
                ('processed', models.BooleanField(default=False, help_text='Indicates whether the webhook event has been processed.', verbose_name='Processed')),
            ],
            options={
                'verbose_name': 'Webhook Event',
                'verbose_name_plural': 'Webhook Events',
            },
        ),
    ]
