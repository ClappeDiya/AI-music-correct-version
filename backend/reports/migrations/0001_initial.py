# Generated by Django 4.2.9 on 2025-02-12 17:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('social_community', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('ai_dj', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BioInspiredRecoStrategy',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the bio-inspired recommendation strategy.', primary_key=True, serialize=False, verbose_name='ID')),
                ('strategy_name', models.TextField(help_text='Name of the bio-inspired recommendation strategy.', unique=True, verbose_name='Strategy Name')),
                ('algorithm_params', models.JSONField(blank=True, help_text='JSON object containing algorithm type, initial population size, and mutation rate.', null=True, verbose_name='Algorithm Parameters')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the strategy was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Bio-Inspired Recommendation Strategy',
                'verbose_name_plural': 'Bio-Inspired Recommendation Strategies',
            },
        ),
        migrations.CreateModel(
            name='DataPrivacySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('anonymization_rules', models.JSONField(default=dict)),
                ('masking_rules', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Data Privacy Settings',
                'verbose_name_plural': 'Data Privacy Settings',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DecentralizedComputeConfig',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the decentralized compute configuration.', primary_key=True, serialize=False, verbose_name='ID')),
                ('partner_id', models.TextField(help_text='Identifier for a decentralized compute network partner.', unique=True, verbose_name='Partner ID')),
                ('connection_details', models.JSONField(blank=True, help_text='JSON object containing API endpoint, auth token, and capabilities.', null=True, verbose_name='Connection Details')),
                ('established_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the partnership was established.', verbose_name='Established At')),
            ],
            options={
                'verbose_name': 'Decentralized Compute Config',
                'verbose_name_plural': 'Decentralized Compute Configs',
            },
        ),
        migrations.CreateModel(
            name='ExternalDataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('source_type', models.CharField(max_length=50)),
                ('connection_details', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'External Data Source',
                'verbose_name_plural': 'External Data Sources',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MetricCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_key', models.CharField(max_length=100)),
                ('data', models.JSONField(default=dict)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'Metric Cache',
                'verbose_name_plural': 'Metric Caches',
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='PersonaSegment',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the persona segment.', primary_key=True, serialize=False, verbose_name='ID')),
                ('segment_name', models.TextField(help_text='Name of the persona segment.', unique=True, verbose_name='Segment Name')),
                ('segment_criteria', models.JSONField(blank=True, help_text='JSON object containing criteria for the persona segment.', null=True, verbose_name='Segment Criteria')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the persona segment was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Persona Segment',
                'verbose_name_plural': 'Persona Segments',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('report_name', models.TextField(verbose_name='Report Name')),
                ('report_parameters', models.JSONField(blank=True, null=True, verbose_name='Report Parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('is_public', models.BooleanField(default=False, verbose_name='Public Report')),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_reports', to=settings.AUTH_USER_MODEL, verbose_name='Shared With')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'permissions': [('share_reports', 'Can share reports with other users'), ('view_all_reports', 'Can view all reports')],
            },
        ),
        migrations.CreateModel(
            name='VisualizationCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_key', models.CharField(max_length=100)),
                ('data', models.JSONField(default=dict)),
                ('parameters', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'Visualization Cache',
                'verbose_name_plural': 'Visualization Caches',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportSchedule',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the report schedule.', primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_cron', models.TextField(help_text='Cron expression for the report schedule.', verbose_name='Schedule Cron')),
                ('delivery_channels', models.JSONField(blank=True, help_text='JSON object containing delivery channels, such as email addresses and Slack webhooks.', null=True, verbose_name='Delivery Channels')),
                ('active', models.BooleanField(default=True, help_text='Indicates if the schedule is active.', verbose_name='Active')),
                ('report', models.ForeignKey(help_text='Report to be scheduled.', on_delete=django.db.models.deletion.CASCADE, related_name='report_schedules', to='reports.report', verbose_name='Report')),
            ],
            options={
                'verbose_name': 'Report Schedule',
                'verbose_name_plural': 'Report Schedules',
            },
        ),
        migrations.CreateModel(
            name='ReportResult',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the report result.', primary_key=True, serialize=False, verbose_name='ID')),
                ('generated_data', models.JSONField(blank=True, help_text='JSON object containing the final data result, including rows and summary.', null=True, verbose_name='Generated Data')),
                ('generated_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the report result was generated.', verbose_name='Generated At')),
                ('report', models.ForeignKey(help_text='Report for which the result was generated.', on_delete=django.db.models.deletion.CASCADE, related_name='report_results', to='reports.report', verbose_name='Report')),
            ],
            options={
                'verbose_name': 'Report Result',
                'verbose_name_plural': 'Report Results',
            },
        ),
        migrations.CreateModel(
            name='QuantumLicensingKey',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the quantum licensing key.', primary_key=True, serialize=False, verbose_name='ID')),
                ('quantum_safe_key', models.TextField(help_text='Quantum-resistant public key or hash.', verbose_name='Quantum Safe Key')),
                ('validity_period', models.JSONField(blank=True, help_text='JSON object containing the start and end dates of the validity period.', null=True, verbose_name='Validity Period')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the licensing key was last updated.', verbose_name='Updated At')),
                ('track_id', models.ForeignKey(blank=True, help_text='Track associated with the licensing key.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quantum_licensing_keys', to='ai_dj.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Quantum Licensing Key',
                'verbose_name_plural': 'Quantum Licensing Keys',
            },
        ),
        migrations.CreateModel(
            name='NeurofeedbackMusicConfig',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the neurofeedback music configuration.', primary_key=True, serialize=False, verbose_name='ID')),
                ('neural_params', models.JSONField(blank=True, help_text='JSON object containing brainwave response thresholds and adjustment rules.', null=True, verbose_name='Neural Parameters')),
                ('last_calibrated', models.DateTimeField(auto_now=True, help_text='Timestamp when the neurofeedback settings were last calibrated.', verbose_name='Last Calibrated')),
                ('user', models.ForeignKey(blank=True, help_text='User associated with the neurofeedback music configuration.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='neurofeedback_music_configs', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Neurofeedback Music Config',
                'verbose_name_plural': 'Neurofeedback Music Configs',
            },
        ),
        migrations.CreateModel(
            name='MultiModalInteraction',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the multi-modal interaction.', primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_config', models.JSONField(blank=True, help_text='JSON object containing supported inputs and orchestration rules.', null=True, verbose_name='Interaction Configuration')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the interaction configuration was last updated.', verbose_name='Updated At')),
                ('user', models.ForeignKey(blank=True, help_text='User associated with the interaction configuration.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='multi_modal_interactions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Multi-Modal Interaction',
                'verbose_name_plural': 'Multi-Modal Interactions',
            },
        ),
        migrations.CreateModel(
            name='KPIVersionHistory',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the KPI version history.', primary_key=True, serialize=False, verbose_name='ID')),
                ('kpi_name', models.TextField(help_text='Name of the KPI.', verbose_name='KPI Name')),
                ('version', models.IntegerField(help_text='Version number of the KPI definition.', verbose_name='Version')),
                ('definition_snapshot', models.JSONField(blank=True, help_text='JSON object containing a snapshot of how the KPI was defined at a certain version.', null=True, verbose_name='Definition Snapshot')),
                ('changed_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the KPI definition was changed.', verbose_name='Changed At')),
            ],
            options={
                'verbose_name': 'KPI Version History',
                'verbose_name_plural': 'KPI Version Histories',
                'unique_together': {('kpi_name', 'version')},
            },
        ),
        migrations.CreateModel(
            name='KPIDefinition',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the KPI definition.', primary_key=True, serialize=False, verbose_name='ID')),
                ('kpi_name', models.TextField(help_text='Unique name of the KPI.', unique=True, verbose_name='KPI Name')),
                ('description', models.TextField(blank=True, help_text='Description of the KPI.', null=True, verbose_name='Description')),
                ('calculation_details', models.JSONField(blank=True, help_text='JSON object containing details on how to calculate the KPI.', null=True, verbose_name='Calculation Details')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_kpis', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'KPI Definition',
                'verbose_name_plural': 'KPI Definitions',
                'permissions': [('view_all_kpis', 'Can view all KPI definitions'), ('manage_kpis', 'Can manage KPI definitions')],
            },
        ),
        migrations.CreateModel(
            name='HolographicStageSetting',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the holographic stage setting.', primary_key=True, serialize=False, verbose_name='ID')),
                ('hologram_config', models.JSONField(blank=True, help_text='JSON object containing stage layout, hologram positions, and lighting matrix.', null=True, verbose_name='Hologram Configuration')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the holographic stage settings were last updated.', verbose_name='Updated At')),
                ('event_id', models.ForeignKey(blank=True, help_text='Event associated with the holographic stage settings.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='holographic_stage_settings', to='social_community.event', verbose_name='Event')),
            ],
            options={
                'verbose_name': 'Holographic Stage Setting',
                'verbose_name_plural': 'Holographic Stage Settings',
            },
        ),
        migrations.CreateModel(
            name='ForecastedMetric',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the forecasted metric.', primary_key=True, serialize=False, verbose_name='ID')),
                ('forecast_data', models.JSONField(blank=True, help_text='JSON object containing forecasted data, including predictions and dates.', null=True, verbose_name='Forecast Data')),
                ('model_version', models.TextField(blank=True, help_text='Version of the model used for forecasting.', null=True, verbose_name='Model Version')),
                ('generated_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the forecast was generated.', verbose_name='Generated At')),
                ('report', models.ForeignKey(help_text='Report for which the metrics are forecasted.', on_delete=django.db.models.deletion.CASCADE, related_name='forecasted_metrics', to='reports.report', verbose_name='Report')),
            ],
            options={
                'verbose_name': 'Forecasted Metric',
                'verbose_name_plural': 'Forecasted Metrics',
            },
        ),
        migrations.CreateModel(
            name='BlockchainRoyaltyLedger',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the blockchain royalty ledger entry.', primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_ref', models.TextField(help_text='Reference to a blockchain transaction.', verbose_name='Transaction Reference')),
                ('distribution_data', models.JSONField(blank=True, help_text='JSON object containing creator information, splits, and timestamp.', null=True, verbose_name='Distribution Data')),
                ('recorded_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the royalty ledger entry was recorded.', verbose_name='Recorded At')),
                ('track_id', models.ForeignKey(blank=True, help_text='Track associated with the royalty ledger entry.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blockchain_royalty_ledgers', to='ai_dj.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Blockchain Royalty Ledger',
                'verbose_name_plural': 'Blockchain Royalty Ledgers',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ReportPersonaAssignment',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the report persona assignment.', primary_key=True, serialize=False, verbose_name='ID')),
                ('persona', models.ForeignKey(help_text='Persona segment assigned to the report.', on_delete=django.db.models.deletion.CASCADE, related_name='report_persona_assignments', to='reports.personasegment', verbose_name='Persona Segment')),
                ('report', models.ForeignKey(help_text='Report to which the persona segment is assigned.', on_delete=django.db.models.deletion.CASCADE, related_name='report_persona_assignments', to='reports.report', verbose_name='Report')),
            ],
            options={
                'verbose_name': 'Report Persona Assignment',
                'verbose_name_plural': 'Report Persona Assignments',
                'unique_together': {('report', 'persona')},
            },
        ),
        migrations.CreateModel(
            name='ReportFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_id', models.CharField(max_length=255)),
                ('rating', models.CharField(choices=[('positive', 'Positive'), ('negative', 'Negative')], max_length=10)),
                ('category', models.CharField(choices=[('clarity', 'Clarity'), ('usability', 'Usability'), ('completeness', 'Completeness'), ('other', 'Other')], max_length=20)),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['report_id'], name='reports_rep_report__a4931e_idx'), models.Index(fields=['created_at'], name='reports_rep_created_de61e9_idx')],
            },
        ),
        migrations.CreateModel(
            name='QueryTemplate',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the query template.', primary_key=True, serialize=False, verbose_name='ID')),
                ('template_name', models.TextField(help_text='Name of the query template.', verbose_name='Template Name')),
                ('query_definition', models.JSONField(blank=True, help_text='JSON object containing the SQL query and parameters.', null=True, verbose_name='Query Definition')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the query template was created.', verbose_name='Created At')),
                ('user', models.ForeignKey(help_text='User who created the query template.', on_delete=django.db.models.deletion.CASCADE, related_name='query_templates', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Query Template',
                'verbose_name_plural': 'Query Templates',
                'unique_together': {('user', 'template_name')},
            },
        ),
    ]
