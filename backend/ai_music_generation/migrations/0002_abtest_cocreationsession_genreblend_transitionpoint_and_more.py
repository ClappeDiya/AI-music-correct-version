# Generated by Django 4.2.9 on 2025-03-12 21:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('ai_music_generation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ABTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('variant_configs', models.JSONField(help_text='Configuration for each variant (A, B, etc.)')),
                ('total_impressions', models.IntegerField(default=0)),
                ('variant_metrics', models.JSONField(default=dict, help_text='Metrics for each variant')),
            ],
        ),
        migrations.CreateModel(
            name='CoCreationSession',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
                ('max_participants', models.IntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session_type', models.CharField(choices=[('composition', 'Composition'), ('improvisation', 'Improvisation'), ('arrangement', 'Arrangement')], default='composition', max_length=50)),
                ('ai_conductor_settings', models.JSONField(default=dict, help_text="Settings for AI's behavior in the session")),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_sessions', to=settings.AUTH_USER_MODEL)),
                ('current_composition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cocreation_sessions', to='ai_music_generation.savedcomposition')),
            ],
        ),
        migrations.CreateModel(
            name='GenreBlend',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('start_time', models.FloatField(help_text='Start time in seconds for this genre blend')),
                ('duration', models.FloatField(help_text='Duration in seconds for this genre blend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_genre_blends', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genre_blends', to='ai_music_generation.cocreationsession')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='TransitionPoint',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('start_time', models.FloatField(help_text='Start time in seconds for this transition')),
                ('duration', models.FloatField(help_text='Duration in seconds for this transition')),
                ('transition_type', models.CharField(choices=[('cross_fade', 'Cross Fade'), ('harmonic_bridge', 'Harmonic Bridge'), ('rhythmic_bridge', 'Rhythmic Bridge'), ('motif_based', 'Motif Based'), ('sudden', 'Sudden')], max_length=50)),
                ('parameters', models.JSONField(help_text='Transition-specific parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transition_points', to='ai_music_generation.cocreationsession')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='TimelineState',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('mood_intensities', models.JSONField(default=dict, help_text='Map of mood names to intensity values (0.0-1.0)')),
                ('active_genres', models.JSONField(default=dict, help_text='Weighted map of active genres')),
                ('current_progression', models.JSONField(default=list, help_text='Current chord progression')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timeline_states', to='ai_music_generation.cocreationsession')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SessionParticipant',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('producer', 'Producer'), ('composer', 'Composer'), ('arranger', 'Arranger'), ('performer', 'Performer'), ('observer', 'Observer')], max_length=50)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('permissions', models.JSONField(default=dict, help_text='Specific permissions for this participant')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='ai_music_generation.cocreationsession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_music_session_participations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SessionChat',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('message_type', models.CharField(choices=[('text', 'Text Message'), ('command', 'Command'), ('suggestion', 'AI Suggestion'), ('notification', 'Notification')], max_length=50)),
                ('content', models.TextField()),
                ('metadata', models.JSONField(blank=True, help_text='Additional message metadata', null=True)),
                ('participant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to='ai_music_generation.sessionparticipant')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to='ai_music_generation.cocreationsession')),
            ],
        ),
        migrations.CreateModel(
            name='RealtimeEdit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('edit_type', models.CharField(choices=[('note', 'Note Edit'), ('chord', 'Chord Edit'), ('rhythm', 'Rhythm Edit'), ('instrument', 'Instrument Edit'), ('effect', 'Effect Edit'), ('structure', 'Structure Edit')], max_length=50)),
                ('position', models.JSONField(help_text='Position in the composition timeline')),
                ('edit_data', models.JSONField(help_text='Details of the edit')),
                ('ai_feedback', models.JSONField(blank=True, help_text="AI's response/suggestions to this edit", null=True)),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edits', to='ai_music_generation.sessionparticipant')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edits', to='ai_music_generation.cocreationsession')),
            ],
        ),
        migrations.CreateModel(
            name='MoodTimeline',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_mood_timelines', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mood_timelines', to='ai_music_generation.cocreationsession')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MoodPoint',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.FloatField(help_text='Timestamp in seconds where this mood point occurs')),
                ('intensity', models.FloatField(help_text='Mood intensity value between 0 and 1')),
                ('mood_type', models.CharField(choices=[('happy', 'Happy'), ('sad', 'Sad'), ('energetic', 'Energetic'), ('calm', 'Calm'), ('tense', 'Tense'), ('relaxed', 'Relaxed')], max_length=50)),
                ('transition_type', models.CharField(choices=[('linear', 'Linear'), ('exponential', 'Exponential'), ('sudden', 'Sudden'), ('gradual', 'Gradual')], default='linear', max_length=50)),
                ('timeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mood_points', to='ai_music_generation.moodtimeline')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='GenreWeight',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('genre', models.CharField(choices=[('rock', 'Rock'), ('jazz', 'Jazz'), ('classical', 'Classical'), ('electronic', 'Electronic'), ('folk', 'Folk'), ('hip_hop', 'Hip Hop'), ('ambient', 'Ambient'), ('blues', 'Blues'), ('latin', 'Latin'), ('funk', 'Funk')], max_length=50)),
                ('weight', models.FloatField(help_text='Weight of this genre in the blend (0-1)')),
                ('blend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genre_weights', to='ai_music_generation.genreblend')),
            ],
        ),
        migrations.CreateModel(
            name='CreativeRole',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('role_type', models.CharField(choices=[('mood_designer', 'Mood Designer'), ('genre_mixer', 'Genre Mixer'), ('chord_progressionist', 'Chord Progressionist'), ('transition_designer', 'Transition Designer')], max_length=50)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creative_roles', to='ai_music_generation.cocreationsession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creative_roles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChordProgression',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('start_time', models.FloatField(help_text='Start time in seconds for this progression')),
                ('duration', models.FloatField(help_text='Duration in seconds for this progression')),
                ('progression', models.JSONField(help_text='List of chords in the progression')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_chord_progressions', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chord_progressions', to='ai_music_generation.cocreationsession')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='AIContribution',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('contribution_type', models.CharField(choices=[('suggestion', 'Suggestion'), ('completion', 'Completion'), ('variation', 'Variation'), ('harmony', 'Harmony'), ('transition', 'Transition')], max_length=50)),
                ('context', models.JSONField(help_text='Musical context that triggered this contribution')),
                ('content', models.JSONField(help_text='The actual musical content suggested')),
                ('explanation', models.TextField(help_text='Natural language explanation of the suggestion')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('modified', 'Modified'), ('rejected', 'Rejected')], default='pending', max_length=50)),
                ('feedback', models.JSONField(blank=True, help_text='User feedback on this contribution', null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_contributions', to='ai_music_generation.cocreationsession')),
            ],
        ),
        migrations.CreateModel(
            name='ABTestAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variant', models.CharField(max_length=50)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_music_generation.abtest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='abtest',
            index=models.Index(fields=['is_active'], name='ai_music_ge_is_acti_389e57_idx'),
        ),
        migrations.AddIndex(
            model_name='abtest',
            index=models.Index(fields=['start_date'], name='ai_music_ge_start_d_b7164f_idx'),
        ),
        migrations.AddIndex(
            model_name='transitionpoint',
            index=models.Index(fields=['session', 'start_time'], name='ai_music_ge_session_b6ee9d_idx'),
        ),
        migrations.AddIndex(
            model_name='timelinestate',
            index=models.Index(fields=['session'], name='ai_music_ge_session_d10fea_idx'),
        ),
        migrations.AddIndex(
            model_name='timelinestate',
            index=models.Index(fields=['timestamp'], name='ai_music_ge_timesta_7346f5_idx'),
        ),
        migrations.AddIndex(
            model_name='sessionparticipant',
            index=models.Index(fields=['session', 'role'], name='ai_music_ge_session_02318c_idx'),
        ),
        migrations.AddIndex(
            model_name='sessionparticipant',
            index=models.Index(fields=['user', 'role'], name='ai_music_ge_user_id_f9a9b9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sessionparticipant',
            unique_together={('session', 'user')},
        ),
        migrations.AddIndex(
            model_name='sessionchat',
            index=models.Index(fields=['session', 'timestamp'], name='ai_music_ge_session_ae34d4_idx'),
        ),
        migrations.AddIndex(
            model_name='sessionchat',
            index=models.Index(fields=['participant', 'message_type'], name='ai_music_ge_partici_21dcc1_idx'),
        ),
        migrations.AddIndex(
            model_name='realtimeedit',
            index=models.Index(fields=['session', 'timestamp'], name='ai_music_ge_session_1da335_idx'),
        ),
        migrations.AddIndex(
            model_name='realtimeedit',
            index=models.Index(fields=['participant', 'edit_type'], name='ai_music_ge_partici_3c8fff_idx'),
        ),
        migrations.AddIndex(
            model_name='moodpoint',
            index=models.Index(fields=['timeline', 'timestamp'], name='ai_music_ge_timelin_2afca4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='genreweight',
            unique_together={('blend', 'genre')},
        ),
        migrations.AddIndex(
            model_name='genreblend',
            index=models.Index(fields=['session', 'start_time'], name='ai_music_ge_session_636893_idx'),
        ),
        migrations.AddIndex(
            model_name='creativerole',
            index=models.Index(fields=['session', 'user'], name='ai_music_ge_session_1c156a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='creativerole',
            unique_together={('session', 'role_type')},
        ),
        migrations.AddIndex(
            model_name='cocreationsession',
            index=models.Index(fields=['created_by'], name='ai_music_ge_created_4e0941_idx'),
        ),
        migrations.AddIndex(
            model_name='cocreationsession',
            index=models.Index(fields=['active'], name='ai_music_ge_active_d96c0d_idx'),
        ),
        migrations.AddIndex(
            model_name='cocreationsession',
            index=models.Index(fields=['session_type'], name='ai_music_ge_session_0db330_idx'),
        ),
        migrations.AddIndex(
            model_name='chordprogression',
            index=models.Index(fields=['session', 'start_time'], name='ai_music_ge_session_63f702_idx'),
        ),
        migrations.AddIndex(
            model_name='aicontribution',
            index=models.Index(fields=['session', 'timestamp'], name='ai_music_ge_session_eddbcb_idx'),
        ),
        migrations.AddIndex(
            model_name='aicontribution',
            index=models.Index(fields=['contribution_type', 'status'], name='ai_music_ge_contrib_71ff27_idx'),
        ),
        migrations.AddIndex(
            model_name='abtestassignment',
            index=models.Index(fields=['user', 'test'], name='ai_music_ge_user_id_81e915_idx'),
        ),
        migrations.AddIndex(
            model_name='abtestassignment',
            index=models.Index(fields=['variant'], name='ai_music_ge_variant_2663ea_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='abtestassignment',
            unique_together={('user', 'test')},
        ),
    ]
