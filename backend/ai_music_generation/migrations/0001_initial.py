# Generated by Django 4.2.9 on 2025-02-12 17:48

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIMusicParams',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the AI music parameters.', primary_key=True, serialize=False)),
                ('parameters', models.JSONField(blank=True, help_text='e.g., {"genre": "jazz", "mood": "mellow", "instruments": ["synth", "sax"], "complexity": "medium"}', null=True, verbose_name='Parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the parameters were created', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'AI Music Parameter',
                'verbose_name_plural': 'AI Music Parameters',
            },
        ),
        migrations.CreateModel(
            name='AIMusicRequest',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the AI music request.', primary_key=True, serialize=False)),
                ('prompt_text', models.TextField(help_text='Text prompt provided by the user', verbose_name='Prompt Text')),
                ('status', models.CharField(default='pending', help_text="Request lifecycle: 'pending', 'in_progress', 'completed', 'failed'", max_length=255, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the request was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the request was last updated', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'AI Music Request',
                'verbose_name_plural': 'AI Music Requests',
            },
        ),
        migrations.CreateModel(
            name='ArrangementSection',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Section name (e.g., 'Intro', 'Verse 1', 'Bridge')", max_length=255)),
                ('section_type', models.CharField(choices=[('intro', 'Introduction'), ('verse', 'Verse'), ('chorus', 'Chorus'), ('bridge', 'Bridge'), ('solo', 'Solo'), ('outro', 'Outro'), ('transition', 'Transition'), ('breakdown', 'Breakdown')], help_text='Type of arrangement section', max_length=50)),
                ('start_time', models.FloatField(help_text='Start time in seconds')),
                ('duration', models.FloatField(help_text='Duration in seconds')),
                ('tempo', models.IntegerField(help_text='Tempo in BPM', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(300)])),
                ('key_signature', models.CharField(help_text='Key signature for this section', max_length=50)),
                ('time_signature', models.CharField(default='4/4', help_text="Time signature (e.g., '4/4', '3/4', '6/8')", max_length=10)),
                ('complexity', models.FloatField(default=0.5, help_text='Complexity level of this section (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('energy_level', models.FloatField(default=0.5, help_text='Energy level of this section (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('section_metadata', models.JSONField(default=dict, help_text='Additional metadata for the section')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Arrangement Section',
                'verbose_name_plural': 'Arrangement Sections',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeSubmission',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ai_contribution_score', models.FloatField(help_text="AI's contribution level in the creation (0-1)", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('community_rating', models.FloatField(blank=True, help_text='Average community rating (0-5)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('submission_notes', models.TextField(blank=True)),
                ('badges_earned', models.JSONField(default=list)),
                ('moderation_status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('flagged', 'Flagged for Review'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Challenge Submission',
                'verbose_name_plural': 'Challenge Submissions',
            },
        ),
        migrations.CreateModel(
            name='CompositionVersion',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the composition version.', primary_key=True, serialize=False)),
                ('version_number', models.PositiveIntegerField(help_text='Sequential version number', verbose_name='Version Number')),
                ('version_notes', models.TextField(blank=True, help_text='Optional notes about this version', null=True, verbose_name='Version Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this version was created', verbose_name='Created At')),
                ('wav_file', models.FileField(blank=True, help_text='WAV format audio file', null=True, upload_to='compositions/wav/%Y/%m/%d/', verbose_name='WAV File')),
                ('mp3_file', models.FileField(blank=True, help_text='MP3 format audio file', null=True, upload_to='compositions/mp3/%Y/%m/%d/', verbose_name='MP3 File')),
                ('midi_file', models.FileField(blank=True, help_text='MIDI format file', null=True, upload_to='compositions/midi/%Y/%m/%d/', verbose_name='MIDI File')),
            ],
            options={
                'verbose_name': 'Composition Version',
                'verbose_name_plural': 'Composition Versions',
                'ordering': ['-version_number'],
            },
        ),
        migrations.CreateModel(
            name='ContentModeration',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('check_type', models.CharField(choices=[('copyright', 'Copyright Check'), ('content_safety', 'Content Safety'), ('quality', 'Quality Assessment'), ('originality', 'Originality Check')], max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('passed', 'Passed'), ('flagged', 'Flagged'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('check_results', models.JSONField(default=dict)),
                ('confidence_score', models.FloatField(help_text='Confidence level of the check result (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('admin_reviewed', models.BooleanField(default=False)),
                ('admin_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Content Moderation',
                'verbose_name_plural': 'Content Moderations',
            },
        ),
        migrations.CreateModel(
            name='CreativeChallenge',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('remix', 'Remix Challenge'), ('genre_fusion', 'Genre Fusion'), ('mood_based', 'Mood Based'), ('cultural_blend', 'Cultural Blend'), ('collaborative', 'Collaborative Creation')], max_length=50)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('max_participants', models.IntegerField(blank=True, null=True)),
                ('reward_badge', models.CharField(blank=True, max_length=100, null=True)),
                ('requirements', models.JSONField(default=dict)),
                ('ai_parameters', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('completed', 'Completed'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Creative Challenge',
                'verbose_name_plural': 'Creative Challenges',
            },
        ),
        migrations.CreateModel(
            name='CrossCulturalBlend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('blend_strategy', models.CharField(choices=[('sequential', 'Sequential Sections'), ('layered', 'Layered Simultaneous'), ('fusion', 'Deep Fusion')], default='fusion', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Cross-Cultural Blend',
                'verbose_name_plural': 'Cross-Cultural Blends',
            },
        ),
        migrations.CreateModel(
            name='GeneratedTrack',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the generated track.', primary_key=True, serialize=False)),
                ('audio_file_url', models.TextField(blank=True, help_text='Link to generated audio file', null=True, verbose_name='Audio File URL')),
                ('waveform_data', models.JSONField(blank=True, help_text='Waveform info for visualization', null=True, verbose_name='Waveform Data')),
                ('notation_data', models.JSONField(blank=True, help_text='Notation (MIDI-like data or symbolic representation)', null=True, verbose_name='Notation Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the track was created', verbose_name='Created At')),
                ('finalization_timestamp', models.DateTimeField(blank=True, help_text='Timestamp when the track was finalized', null=True, verbose_name='Finalization Timestamp')),
            ],
            options={
                'verbose_name': 'Generated Track',
                'verbose_name_plural': 'Generated Tracks',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Genre Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='HarmonyGroup',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the harmony group', max_length=255)),
                ('voicing_type', models.CharField(choices=[('2part', '2-Part'), ('3part', '3-Part'), ('4part', '4-Part'), ('custom', 'Custom')], help_text='Type of harmony voicing', max_length=50)),
                ('chord_progression', models.JSONField(help_text='Underlying chord progression for harmonization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Harmony Group',
                'verbose_name_plural': 'Harmony Groups',
            },
        ),
        migrations.CreateModel(
            name='HarmonyVoicing',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('voice_order', models.IntegerField(help_text='Order in the harmony stack (0 = bottom)')),
                ('transposition', models.IntegerField(default=0, help_text='Semitone transposition from root')),
                ('volume_adjustment', models.FloatField(default=0.0, help_text='Volume adjustment in dB')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Harmony Voicing',
                'verbose_name_plural': 'Harmony Voicings',
                'ordering': ['voice_order'],
            },
        ),
        migrations.CreateModel(
            name='LLMProvider',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the LLM provider.', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="e.g. 'open_source_llama', 'openai_gpt4'", max_length=255, unique=True, verbose_name='Provider Name')),
                ('provider_type', models.CharField(help_text="e.g. 'open_source', 'third_party'", max_length=255, verbose_name='Provider Type')),
                ('api_endpoint', models.TextField(blank=True, help_text='Endpoint for LLM calls if external', null=True, verbose_name='API Endpoint')),
                ('api_credentials', models.JSONField(blank=True, help_text='Store API keys/credentials encrypted externally', null=True, verbose_name='API Credentials')),
                ('active', models.BooleanField(default=True, help_text='Indicates if the provider is active', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the provider was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the provider was last updated', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'LLM Provider',
                'verbose_name_plural': 'LLM Providers',
            },
        ),
        migrations.CreateModel(
            name='MasteringPreset',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the mastering preset', max_length=255)),
                ('description', models.TextField(help_text='Description of the sonic character')),
                ('preset_type', models.CharField(choices=[('punchy', 'Loud and Punchy'), ('warm', 'Warm and Dynamic'), ('modern', 'Modern and Clean'), ('vintage', 'Vintage and Colored'), ('reference', 'Reference Based'), ('custom', 'Custom')], help_text='Type of mastering preset', max_length=50)),
                ('eq_settings', models.JSONField(help_text='Equalizer settings for different frequency bands')),
                ('dynamics_settings', models.JSONField(help_text='Compressor and limiter settings')),
                ('stereo_settings', models.JSONField(help_text='Stereo imaging and width settings')),
                ('saturation_settings', models.JSONField(blank=True, help_text='Harmonic enhancement settings', null=True)),
                ('target_lufs', models.FloatField(default=-14.0, help_text='Target integrated loudness in LUFS')),
                ('target_peak', models.FloatField(default=-1.0, help_text='Target true peak in dBFS')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Mastering Preset',
                'verbose_name_plural': 'Mastering Presets',
            },
        ),
        migrations.CreateModel(
            name='MasteringSession',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('reference_track', models.FileField(blank=True, help_text='Optional reference track for matching', null=True, upload_to='mastering/references/%Y/%m/%d/')),
                ('reference_analysis', models.JSONField(blank=True, help_text='Spectral and dynamic analysis of reference track', null=True)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('analyzing', 'Analyzing'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=50)),
                ('processing_log', models.JSONField(default=list, help_text='Log of processing steps and measurements')),
                ('output_file', models.FileField(blank=True, help_text='Mastered output file', null=True, upload_to='mastering/output/%Y/%m/%d/')),
                ('output_analysis', models.JSONField(blank=True, help_text='Analysis of the mastered output', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('composition_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mastering_sessions', to='ai_music_generation.compositionversion')),
                ('preset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sessions', to='ai_music_generation.masteringpreset')),
            ],
            options={
                'verbose_name': 'Mastering Session',
                'verbose_name_plural': 'Mastering Sessions',
            },
        ),
        migrations.CreateModel(
            name='ModelRouter',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('routing_strategy', models.CharField(max_length=255)),
                ('task_breakdown', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='router', to='ai_music_generation.aimusicrequest')),
            ],
            options={
                'verbose_name': 'Model Router',
                'verbose_name_plural': 'Model Routers',
            },
        ),
        migrations.CreateModel(
            name='MusicTradition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('scale_system', models.JSONField(help_text='Definition of scales/modes used in this tradition')),
                ('rhythmic_patterns', models.JSONField(help_text='Common rhythmic patterns in this tradition')),
                ('typical_instruments', models.JSONField(help_text='Traditional instruments used')),
                ('melodic_patterns', models.JSONField(help_text='Characteristic melodic patterns/motifs')),
                ('model_weights', models.CharField(help_text='Path to specialized model weights for this tradition', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Music Tradition',
                'verbose_name_plural': 'Music Traditions',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Region Name')),
                ('code', models.CharField(max_length=10, unique=True, verbose_name='Region Code')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SavedComposition',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the saved composition.', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the composition', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, help_text='Optional description of the composition', null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the composition was first saved', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the composition was last updated', verbose_name='Updated At')),
                ('is_public', models.BooleanField(default=False, help_text='Whether the composition is publicly accessible', verbose_name='Is Public')),
                ('tags', models.JSONField(blank=True, help_text='Optional tags for categorizing the composition', null=True, verbose_name='Tags')),
                ('user', models.ForeignKey(help_text='User who owns the composition', on_delete=django.db.models.deletion.CASCADE, related_name='saved_compositions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Saved Composition',
                'verbose_name_plural': 'Saved Compositions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrackLayer',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Name of the track layer (e.g., 'Lead Guitar', 'Drums')", max_length=255)),
                ('track_type', models.CharField(choices=[('rhythm', 'Rhythm'), ('lead', 'Lead'), ('percussion', 'Percussion'), ('vocals', 'Vocals'), ('bass', 'Bass'), ('strings', 'Strings'), ('synth', 'Synthesizer'), ('effects', 'Effects')], help_text='Type of track layer', max_length=50)),
                ('instrument', models.CharField(help_text='Specific instrument for this track', max_length=255)),
                ('midi_channel', models.IntegerField(help_text='MIDI channel (0-15) for this track', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('volume', models.FloatField(default=1.0, help_text='Track volume (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('pan', models.FloatField(default=0.0, help_text='Track panning (-1.0 left to 1.0 right)', validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('muted', models.BooleanField(default=False)),
                ('soloed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('composition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_layers', to='ai_music_generation.savedcomposition')),
            ],
            options={
                'verbose_name': 'Track Layer',
                'verbose_name_plural': 'Track Layers',
                'ordering': ['track_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='VocalLine',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('voice_type', models.CharField(choices=[('soprano', 'Soprano'), ('alto', 'Alto'), ('tenor', 'Tenor'), ('bass', 'Bass'), ('lead', 'Lead'), ('backing', 'Backing')], help_text='Type/register of the vocal line', max_length=50)),
                ('is_harmony', models.BooleanField(default=False, help_text='Whether this is a harmony part')),
                ('harmony_role', models.CharField(blank=True, choices=[('root', 'Root'), ('third', 'Third'), ('fifth', 'Fifth'), ('seventh', 'Seventh'), ('custom', 'Custom')], help_text='Role in harmony stack', max_length=50, null=True)),
                ('vocal_range', models.JSONField(default=dict, help_text='Min/max note range for this vocal line')),
                ('synthesis_params', models.JSONField(default=dict, help_text='Parameters for voice synthesis')),
                ('melody_data', models.JSONField(help_text='Melodic line data (notes, timing, etc.)')),
                ('lyrics_alignment', models.JSONField(blank=True, help_text='Timing alignment between lyrics and melody', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('composition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vocal_lines', to='ai_music_generation.savedcomposition')),
                ('track', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vocal_line', to='ai_music_generation.tracklayer')),
            ],
            options={
                'verbose_name': 'Vocal Line',
                'verbose_name_plural': 'Vocal Lines',
                'ordering': ['voice_type'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('genre_weights', models.JSONField(default=dict, help_text='Weighted preferences for different genres')),
                ('instrument_weights', models.JSONField(default=dict, help_text='Weighted preferences for different instruments')),
                ('style_weights', models.JSONField(default=dict, help_text='Weighted preferences for different styles')),
                ('complexity_preference', models.FloatField(default=0.5, help_text='Preferred musical complexity (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('tempo_preference', models.JSONField(default=dict, help_text='Tempo range and weights')),
                ('learning_rate', models.FloatField(default=0.1, help_text='Rate at which preferences are updated from feedback')),
                ('exploration_rate', models.FloatField(default=0.2, help_text='Rate of exploring new musical elements vs exploiting known preferences')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('feedback_count', models.IntegerField(default=0)),
                ('confidence_scores', models.JSONField(default=dict, help_text='Confidence in learned preferences for different aspects')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='music_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('feedback_type', models.CharField(choices=[('like', 'Like'), ('dislike', 'Dislike'), ('tweak', 'Tweak Request'), ('accept', 'Accept'), ('decline', 'Decline')], max_length=50)),
                ('rating', models.IntegerField(blank=True, help_text='Optional rating from 1-5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback_text', models.TextField(blank=True, help_text='Detailed feedback or tweak instructions', null=True)),
                ('context', models.JSONField(blank=True, help_text='Additional context about the feedback (e.g., specific aspects liked/disliked)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('generated_track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='ai_music_generation.generatedtrack')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='music_feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Feedback',
                'verbose_name_plural': 'User Feedback',
            },
        ),
        migrations.CreateModel(
            name='TraditionBlendWeight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('section_order', models.IntegerField(blank=True, help_text='Order for sequential blending', null=True)),
                ('blend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_music_generation.crossculturalblend')),
                ('tradition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_music_generation.musictradition')),
            ],
            options={
                'verbose_name': 'Tradition Blend Weight',
                'verbose_name_plural': 'Tradition Blend Weights',
            },
        ),
        migrations.CreateModel(
            name='TrackAutomation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('parameter_name', models.CharField(choices=[('volume', 'Volume'), ('pan', 'Panning'), ('reverb', 'Reverb'), ('delay', 'Delay'), ('filter', 'Filter'), ('distortion', 'Distortion')], help_text='Parameter being automated', max_length=50)),
                ('automation_data', models.JSONField(help_text='Time-value pairs for automation')),
                ('interpolation_type', models.CharField(choices=[('linear', 'Linear'), ('exponential', 'Exponential'), ('step', 'Step')], default='linear', help_text='How to interpolate between automation points', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='automations', to='ai_music_generation.tracklayer')),
            ],
            options={
                'verbose_name': 'Track Automation',
                'verbose_name_plural': 'Track Automations',
            },
        ),
        migrations.CreateModel(
            name='SpectralMatch',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('frequency_match', models.JSONField(help_text='Frequency response matching data')),
                ('dynamics_match', models.JSONField(help_text='Dynamic range matching data')),
                ('stereo_match', models.JSONField(help_text='Stereo field matching data')),
                ('match_quality', models.FloatField(help_text='Overall match quality score (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('mastering_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='spectral_match', to='ai_music_generation.masteringsession')),
            ],
            options={
                'verbose_name': 'Spectral Match',
                'verbose_name_plural': 'Spectral Matches',
            },
        ),
        migrations.AddField(
            model_name='musictradition',
            name='region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_music_generation.region'),
        ),
        migrations.CreateModel(
            name='MultilingualLyrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_language', models.CharField(max_length=10)),
                ('translation_languages', models.JSONField(default=list, help_text='List of target languages for translations')),
                ('original_lyrics', models.TextField()),
                ('translations', models.JSONField(default=dict, help_text='Mapped translations for each target language')),
                ('phonetic_guide', models.JSONField(default=dict, help_text='Pronunciation guides for non-native singers')),
                ('cultural_notes', models.JSONField(default=dict, help_text='Cultural context and meaning explanations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_music_generation.generatedtrack')),
            ],
            options={
                'verbose_name': 'Multilingual Lyrics',
                'verbose_name_plural': 'Multilingual Lyrics',
            },
        ),
        migrations.CreateModel(
            name='ModelUsageLog',
            fields=[
                ('id', models.BigAutoField(help_text='Unique identifier for the model usage log.', primary_key=True, serialize=False)),
                ('prompt_sent', models.TextField(blank=True, help_text='Raw prompt sent to the model', null=True, verbose_name='Prompt Sent')),
                ('response_metadata', models.JSONField(blank=True, help_text='Includes tokens count, latency, cost, error messages if any', null=True, verbose_name='Response Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the log was created', verbose_name='Created At')),
                ('provider', models.ForeignKey(help_text='LLM provider used for this log', on_delete=django.db.models.deletion.RESTRICT, related_name='model_usage_logs', to='ai_music_generation.llmprovider', verbose_name='LLM Provider')),
                ('request', models.ForeignKey(help_text='AI music request this log belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='model_usage_logs', to='ai_music_generation.aimusicrequest', verbose_name='AI Music Request')),
            ],
            options={
                'verbose_name': 'Model Usage Log',
                'verbose_name_plural': 'Model Usage Logs',
            },
        ),
        migrations.CreateModel(
            name='ModelRouterAssignment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('task_type', models.CharField(max_length=255)),
                ('status', models.CharField(default='pending', max_length=255)),
                ('priority', models.IntegerField(default=0)),
                ('result', models.JSONField(blank=True, null=True)),
                ('error', models.JSONField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='router_assignments', to='ai_music_generation.llmprovider')),
                ('router', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='ai_music_generation.modelrouter')),
            ],
            options={
                'verbose_name': 'Model Router Assignment',
                'verbose_name_plural': 'Model Router Assignments',
                'ordering': ['priority'],
            },
        ),
        migrations.AddField(
            model_name='modelrouter',
            name='selected_providers',
            field=models.ManyToManyField(through='ai_music_generation.ModelRouterAssignment', to='ai_music_generation.llmprovider'),
        ),
        migrations.CreateModel(
            name='ModelCapability',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('capability_type', models.CharField(max_length=255)),
                ('confidence_score', models.FloatField()),
                ('latency_ms', models.IntegerField()),
                ('cost_per_request', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('max_input_length', models.IntegerField()),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='capabilities', to='ai_music_generation.llmprovider')),
            ],
            options={
                'verbose_name': 'Model Capability',
                'verbose_name_plural': 'Model Capabilities',
            },
        ),
        migrations.AddIndex(
            model_name='masteringpreset',
            index=models.Index(fields=['preset_type'], name='ai_music_ge_preset__2ba6a3_idx'),
        ),
        migrations.AddField(
            model_name='harmonyvoicing',
            name='harmony_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_music_generation.harmonygroup'),
        ),
        migrations.AddField(
            model_name='harmonyvoicing',
            name='vocal_line',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_music_generation.vocalline'),
        ),
        migrations.AddField(
            model_name='harmonygroup',
            name='composition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='harmony_groups', to='ai_music_generation.savedcomposition'),
        ),
        migrations.AddField(
            model_name='harmonygroup',
            name='vocal_lines',
            field=models.ManyToManyField(help_text='Vocal lines in this harmony group', related_name='harmony_groups', through='ai_music_generation.HarmonyVoicing', to='ai_music_generation.vocalline'),
        ),
        migrations.AddField(
            model_name='generatedtrack',
            name='request',
            field=models.ForeignKey(help_text='AI music request this track belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='generated_tracks', to='ai_music_generation.aimusicrequest', verbose_name='AI Music Request'),
        ),
        migrations.AddField(
            model_name='crossculturalblend',
            name='traditions',
            field=models.ManyToManyField(through='ai_music_generation.TraditionBlendWeight', to='ai_music_generation.musictradition'),
        ),
        migrations.AddIndex(
            model_name='creativechallenge',
            index=models.Index(fields=['challenge_type', 'status'], name='ai_music_ge_challen_9126b4_idx'),
        ),
        migrations.AddIndex(
            model_name='creativechallenge',
            index=models.Index(fields=['start_date', 'end_date'], name='ai_music_ge_start_d_0a5ab6_idx'),
        ),
        migrations.AddField(
            model_name='contentmoderation',
            name='composition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderation_checks', to='ai_music_generation.savedcomposition'),
        ),
        migrations.AddField(
            model_name='compositionversion',
            name='composition',
            field=models.ForeignKey(help_text='The composition this version belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='ai_music_generation.savedcomposition', verbose_name='Composition'),
        ),
        migrations.AddField(
            model_name='compositionversion',
            name='generated_track',
            field=models.ForeignKey(help_text='The generated track for this version', on_delete=django.db.models.deletion.PROTECT, related_name='composition_versions', to='ai_music_generation.generatedtrack', verbose_name='Generated Track'),
        ),
        migrations.AddField(
            model_name='compositionversion',
            name='parameters',
            field=models.ForeignKey(help_text='The parameters used for this version', on_delete=django.db.models.deletion.PROTECT, related_name='composition_versions', to='ai_music_generation.aimusicparams', verbose_name='Parameters'),
        ),
        migrations.AddField(
            model_name='challengesubmission',
            name='challenge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='ai_music_generation.creativechallenge'),
        ),
        migrations.AddField(
            model_name='challengesubmission',
            name='composition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_submissions', to='ai_music_generation.savedcomposition'),
        ),
        migrations.AddField(
            model_name='challengesubmission',
            name='participant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_submissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='arrangementsection',
            name='composition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arrangement_sections', to='ai_music_generation.savedcomposition'),
        ),
        migrations.AddField(
            model_name='arrangementsection',
            name='parent_section',
            field=models.ForeignKey(blank=True, help_text='Parent section for nested arrangements', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subsections', to='ai_music_generation.arrangementsection'),
        ),
        migrations.AddField(
            model_name='aimusicrequest',
            name='provider',
            field=models.ForeignKey(help_text='LLM provider used for the request', on_delete=django.db.models.deletion.RESTRICT, related_name='ai_music_requests', to='ai_music_generation.llmprovider', verbose_name='LLM Provider'),
        ),
        migrations.AddField(
            model_name='aimusicrequest',
            name='user',
            field=models.ForeignKey(help_text='User who made the request', on_delete=django.db.models.deletion.CASCADE, related_name='ai_music_requests', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='aimusicparams',
            name='request',
            field=models.ForeignKey(help_text='AI music request these parameters belong to', on_delete=django.db.models.deletion.CASCADE, related_name='ai_music_params', to='ai_music_generation.aimusicrequest', verbose_name='AI Music Request'),
        ),
        migrations.AddIndex(
            model_name='vocalline',
            index=models.Index(fields=['composition'], name='ai_music_ge_composi_a98c41_idx'),
        ),
        migrations.AddIndex(
            model_name='vocalline',
            index=models.Index(fields=['voice_type'], name='ai_music_ge_voice_t_b6a418_idx'),
        ),
        migrations.AddIndex(
            model_name='userpreference',
            index=models.Index(fields=['user'], name='ai_music_ge_user_id_442262_idx'),
        ),
        migrations.AddIndex(
            model_name='userpreference',
            index=models.Index(fields=['last_updated'], name='ai_music_ge_last_up_d294d2_idx'),
        ),
        migrations.AddIndex(
            model_name='userfeedback',
            index=models.Index(fields=['user', 'feedback_type'], name='ai_music_ge_user_id_101da8_idx'),
        ),
        migrations.AddIndex(
            model_name='userfeedback',
            index=models.Index(fields=['generated_track', 'feedback_type'], name='ai_music_ge_generat_ca9bd8_idx'),
        ),
        migrations.AddIndex(
            model_name='userfeedback',
            index=models.Index(fields=['created_at'], name='ai_music_ge_created_b69d59_idx'),
        ),
        migrations.AddIndex(
            model_name='traditionblendweight',
            index=models.Index(fields=['blend', 'tradition'], name='ai_music_ge_blend_i_c667e5_idx'),
        ),
        migrations.AddIndex(
            model_name='traditionblendweight',
            index=models.Index(fields=['section_order'], name='ai_music_ge_section_db805d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='traditionblendweight',
            unique_together={('blend', 'tradition')},
        ),
        migrations.AddIndex(
            model_name='tracklayer',
            index=models.Index(fields=['composition'], name='ai_music_ge_composi_dde94b_idx'),
        ),
        migrations.AddIndex(
            model_name='tracklayer',
            index=models.Index(fields=['track_type'], name='ai_music_ge_track_t_68953e_idx'),
        ),
        migrations.AddIndex(
            model_name='trackautomation',
            index=models.Index(fields=['track', 'parameter_name'], name='ai_music_ge_track_i_6e2a23_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trackautomation',
            unique_together={('track', 'parameter_name')},
        ),
        migrations.AddIndex(
            model_name='spectralmatch',
            index=models.Index(fields=['mastering_session'], name='ai_music_ge_masteri_8671ac_idx'),
        ),
        migrations.AddIndex(
            model_name='savedcomposition',
            index=models.Index(fields=['user'], name='ai_music_ge_user_id_1d78c4_idx'),
        ),
        migrations.AddIndex(
            model_name='savedcomposition',
            index=models.Index(fields=['created_at'], name='ai_music_ge_created_8b7660_idx'),
        ),
        migrations.AddIndex(
            model_name='savedcomposition',
            index=models.Index(fields=['is_public'], name='ai_music_ge_is_publ_658d51_idx'),
        ),
        migrations.AddIndex(
            model_name='musictradition',
            index=models.Index(fields=['name'], name='ai_music_ge_name_15c44c_idx'),
        ),
        migrations.AddIndex(
            model_name='musictradition',
            index=models.Index(fields=['region'], name='ai_music_ge_region__c6c8e6_idx'),
        ),
        migrations.AddIndex(
            model_name='multilinguallyrics',
            index=models.Index(fields=['track'], name='ai_music_ge_track_i_c42a88_idx'),
        ),
        migrations.AddIndex(
            model_name='multilinguallyrics',
            index=models.Index(fields=['primary_language'], name='ai_music_ge_primary_e897ec_idx'),
        ),
        migrations.AddIndex(
            model_name='modelrouterassignment',
            index=models.Index(fields=['router', 'status'], name='ai_music_ge_router__d35475_idx'),
        ),
        migrations.AddIndex(
            model_name='modelrouterassignment',
            index=models.Index(fields=['provider', 'task_type'], name='ai_music_ge_provide_a47833_idx'),
        ),
        migrations.AddIndex(
            model_name='modelrouterassignment',
            index=models.Index(fields=['started_at'], name='ai_music_ge_started_b04568_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='modelrouterassignment',
            unique_together={('router', 'provider', 'task_type')},
        ),
        migrations.AddIndex(
            model_name='modelrouter',
            index=models.Index(fields=['request'], name='ai_music_ge_request_3d0e2d_idx'),
        ),
        migrations.AddIndex(
            model_name='modelrouter',
            index=models.Index(fields=['routing_strategy'], name='ai_music_ge_routing_564ebd_idx'),
        ),
        migrations.AddIndex(
            model_name='modelrouter',
            index=models.Index(fields=['created_at'], name='ai_music_ge_created_6471d2_idx'),
        ),
        migrations.AddIndex(
            model_name='modelcapability',
            index=models.Index(fields=['provider', 'capability_type'], name='ai_music_ge_provide_397cba_idx'),
        ),
        migrations.AddIndex(
            model_name='modelcapability',
            index=models.Index(fields=['capability_type', 'confidence_score'], name='ai_music_ge_capabil_637d91_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='modelcapability',
            unique_together={('provider', 'capability_type')},
        ),
        migrations.AddIndex(
            model_name='masteringsession',
            index=models.Index(fields=['composition_version'], name='ai_music_ge_composi_614541_idx'),
        ),
        migrations.AddIndex(
            model_name='masteringsession',
            index=models.Index(fields=['processing_status'], name='ai_music_ge_process_628918_idx'),
        ),
        migrations.AddIndex(
            model_name='harmonyvoicing',
            index=models.Index(fields=['harmony_group', 'vocal_line'], name='ai_music_ge_harmony_f76b51_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='harmonyvoicing',
            unique_together={('harmony_group', 'voice_order')},
        ),
        migrations.AddIndex(
            model_name='harmonygroup',
            index=models.Index(fields=['composition'], name='ai_music_ge_composi_9f1098_idx'),
        ),
        migrations.AddIndex(
            model_name='harmonygroup',
            index=models.Index(fields=['voicing_type'], name='ai_music_ge_voicing_e5600b_idx'),
        ),
        migrations.AddIndex(
            model_name='generatedtrack',
            index=models.Index(fields=['request'], name='ai_music_ge_request_7a7845_idx'),
        ),
        migrations.AddIndex(
            model_name='generatedtrack',
            index=models.Index(fields=['waveform_data'], name='idx_gen_tracks_waveform'),
        ),
        migrations.AddIndex(
            model_name='crossculturalblend',
            index=models.Index(fields=['name'], name='ai_music_ge_name_de235e_idx'),
        ),
        migrations.AddIndex(
            model_name='crossculturalblend',
            index=models.Index(fields=['blend_strategy'], name='ai_music_ge_blend_s_67cd9b_idx'),
        ),
        migrations.AddIndex(
            model_name='contentmoderation',
            index=models.Index(fields=['check_type', 'status'], name='ai_music_ge_check_t_26814c_idx'),
        ),
        migrations.AddIndex(
            model_name='contentmoderation',
            index=models.Index(fields=['confidence_score'], name='ai_music_ge_confide_95afec_idx'),
        ),
        migrations.AddIndex(
            model_name='compositionversion',
            index=models.Index(fields=['composition'], name='ai_music_ge_composi_3699be_idx'),
        ),
        migrations.AddIndex(
            model_name='compositionversion',
            index=models.Index(fields=['version_number'], name='ai_music_ge_version_2b11a8_idx'),
        ),
        migrations.AddIndex(
            model_name='compositionversion',
            index=models.Index(fields=['created_at'], name='ai_music_ge_created_12b2ef_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='compositionversion',
            unique_together={('composition', 'version_number')},
        ),
        migrations.AddIndex(
            model_name='challengesubmission',
            index=models.Index(fields=['challenge', 'moderation_status'], name='ai_music_ge_challen_ebbf9b_idx'),
        ),
        migrations.AddIndex(
            model_name='challengesubmission',
            index=models.Index(fields=['community_rating'], name='ai_music_ge_communi_2bd9c0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='challengesubmission',
            unique_together={('challenge', 'composition')},
        ),
        migrations.AddIndex(
            model_name='arrangementsection',
            index=models.Index(fields=['composition'], name='ai_music_ge_composi_acb259_idx'),
        ),
        migrations.AddIndex(
            model_name='arrangementsection',
            index=models.Index(fields=['parent_section'], name='ai_music_ge_parent__6d27f2_idx'),
        ),
        migrations.AddIndex(
            model_name='arrangementsection',
            index=models.Index(fields=['section_type'], name='ai_music_ge_section_41ed81_idx'),
        ),
        migrations.AddIndex(
            model_name='aimusicrequest',
            index=models.Index(fields=['user'], name='ai_music_ge_user_id_0750fa_idx'),
        ),
        migrations.AddIndex(
            model_name='aimusicrequest',
            index=models.Index(fields=['status'], name='ai_music_ge_status_d61275_idx'),
        ),
        migrations.AddIndex(
            model_name='aimusicparams',
            index=models.Index(fields=['parameters'], name='idx_ai_music_params_parameters'),
        ),
    ]
