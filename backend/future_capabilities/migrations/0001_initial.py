# Generated by Django 4.2.9 on 2025-02-12 17:50

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BiofeedbackData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('data_type', models.CharField(choices=[('heart_rate', 'Heart Rate'), ('step_count', 'Step Count'), ('movement', 'Movement'), ('temperature', 'Temperature')], max_length=50, verbose_name='Data Type')),
                ('value', models.FloatField(verbose_name='Value')),
                ('unit', models.CharField(max_length=20, verbose_name='Unit')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
            ],
            options={
                'verbose_name': 'Biofeedback Data',
                'verbose_name_plural': 'Biofeedback Data',
            },
        ),
        migrations.CreateModel(
            name='BiofeedbackEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('event_type', models.CharField(choices=[('tempo_change', 'Tempo Change'), ('energy_adjustment', 'Energy Adjustment'), ('mood_shift', 'Mood Shift'), ('alert', 'Alert')], max_length=50, verbose_name='Event Type')),
                ('previous_state', models.JSONField(default=dict, verbose_name='Previous State')),
                ('new_state', models.JSONField(default=dict, verbose_name='New State')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Confidence Score')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
            ],
            options={
                'verbose_name': 'Biofeedback Event',
                'verbose_name_plural': 'Biofeedback Events',
            },
        ),
        migrations.CreateModel(
            name='FeatureSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Survey Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('feature_category', models.CharField(choices=[('vr', 'Virtual Reality'), ('collaboration', 'Collaboration'), ('ai', 'AI Tools'), ('interface', 'User Interface'), ('audio', 'Audio Processing'), ('other', 'Other')], max_length=50, verbose_name='Feature Category')),
                ('priority_level', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('critical', 'Critical')], default='medium', max_length=20, verbose_name='Priority Level')),
                ('start_date', models.DateTimeField(verbose_name='Start Date')),
                ('end_date', models.DateTimeField(verbose_name='End Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Feature Survey',
                'verbose_name_plural': 'Feature Surveys',
            },
        ),
        migrations.CreateModel(
            name='FeatureUsageAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('feature_name', models.CharField(max_length=100, verbose_name='Feature Name')),
                ('feature_category', models.CharField(choices=[('vr', 'Virtual Reality'), ('collaboration', 'Collaboration'), ('ai', 'AI Tools'), ('interface', 'User Interface'), ('audio', 'Audio Processing'), ('other', 'Other')], max_length=50, verbose_name='Feature Category')),
                ('session_duration', models.DurationField(verbose_name='Session Duration')),
                ('interaction_count', models.IntegerField(default=0, verbose_name='Interaction Count')),
                ('success_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Success Rate')),
                ('errors_encountered', models.IntegerField(default=0, verbose_name='Errors Encountered')),
                ('performance_metrics', models.JSONField(default=dict, verbose_name='Performance Metrics')),
                ('user_feedback', models.TextField(blank=True, verbose_name='User Feedback')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
            ],
            options={
                'verbose_name': 'Feature Usage Analytics',
                'verbose_name_plural': 'Feature Usage Analytics',
            },
        ),
        migrations.CreateModel(
            name='NeuralControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('name', models.CharField(max_length=100, verbose_name='Control Name')),
                ('signal_type', models.CharField(choices=[('alpha', 'Alpha Waves'), ('beta', 'Beta Waves'), ('gamma', 'Gamma Waves'), ('muscle', 'Muscle Activity')], max_length=50, verbose_name='Signal Type')),
                ('control_parameter', models.CharField(choices=[('volume', 'Volume'), ('pitch', 'Pitch'), ('tempo', 'Tempo'), ('filter', 'Filter'), ('effect', 'Effect')], max_length=50, verbose_name='Control Parameter')),
                ('mapping_function', models.CharField(choices=[('linear', 'Linear'), ('exponential', 'Exponential'), ('threshold', 'Threshold'), ('custom', 'Custom')], max_length=50, verbose_name='Mapping Function')),
                ('mapping_config', models.JSONField(default=dict, verbose_name='Mapping Configuration')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Neural Control',
                'verbose_name_plural': 'Neural Controls',
            },
        ),
        migrations.CreateModel(
            name='NeuralDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('device_name', models.CharField(max_length=100, verbose_name='Device Name')),
                ('device_type', models.CharField(choices=[('eeg', 'EEG Headset'), ('emg', 'EMG Sensor'), ('hybrid', 'Hybrid Device')], max_length=50, verbose_name='Device Type')),
                ('connection_status', models.CharField(choices=[('connected', 'Connected'), ('disconnected', 'Disconnected'), ('calibrating', 'Calibrating'), ('error', 'Error')], default='disconnected', max_length=20, verbose_name='Connection Status')),
                ('last_calibration', models.DateTimeField(blank=True, null=True, verbose_name='Last Calibration')),
                ('settings', models.JSONField(default=dict, verbose_name='Device Settings')),
            ],
            options={
                'verbose_name': 'Neural Device',
                'verbose_name_plural': 'Neural Devices',
            },
        ),
        migrations.CreateModel(
            name='NeuralSignal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal_type', models.CharField(choices=[('alpha', 'Alpha Waves'), ('beta', 'Beta Waves'), ('gamma', 'Gamma Waves'), ('muscle', 'Muscle Activity')], max_length=50, verbose_name='Signal Type')),
                ('signal_data', models.JSONField(verbose_name='Signal Data')),
                ('signal_quality', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Signal Quality')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
            ],
            options={
                'verbose_name': 'Neural Signal',
                'verbose_name_plural': 'Neural Signals',
            },
        ),
        migrations.CreateModel(
            name='Plugin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Plugin Name')),
                ('type', models.CharField(choices=[('instrument', 'Instrument'), ('effect', 'Effect'), ('ai_model', 'AI Model'), ('visualization', 'Visualization'), ('analysis', 'Analysis Tool')], max_length=50, verbose_name='Plugin Type')),
                ('version', models.CharField(max_length=20, verbose_name='Version')),
                ('description', models.TextField(verbose_name='Description')),
                ('icon_url', models.URLField(blank=True, verbose_name='Icon URL')),
                ('entry_point', models.CharField(max_length=200, verbose_name='Entry Point')),
                ('is_certified', models.BooleanField(default=False, verbose_name='Certification Status')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active Status')),
                ('certification_date', models.DateTimeField(blank=True, null=True, verbose_name='Certification Date')),
                ('required_permissions', models.JSONField(default=list, verbose_name='Required Permissions')),
                ('compatibility', models.JSONField(default=dict, verbose_name='Compatibility Info')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Plugin',
                'verbose_name_plural': 'Plugins',
            },
        ),
        migrations.CreateModel(
            name='PluginDeveloper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('company_name', models.CharField(max_length=100, verbose_name='Company Name')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('api_key', models.CharField(max_length=64, unique=True, verbose_name='API Key')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Verified Status')),
                ('verification_date', models.DateTimeField(blank=True, null=True, verbose_name='Verification Date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Plugin Developer',
                'verbose_name_plural': 'Plugin Developers',
            },
        ),
        migrations.CreateModel(
            name='PluginInstallation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Enabled Status')),
                ('settings', models.JSONField(default=dict, verbose_name='User Settings')),
                ('granted_permissions', models.JSONField(default=list, verbose_name='Granted Permissions')),
                ('installed_at', models.DateTimeField(auto_now_add=True, verbose_name='Installed At')),
                ('last_used', models.DateTimeField(blank=True, null=True, verbose_name='Last Used')),
            ],
            options={
                'verbose_name': 'Plugin Installation',
                'verbose_name_plural': 'Plugin Installations',
            },
        ),
        migrations.CreateModel(
            name='PluginRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('review', models.TextField(blank=True, verbose_name='Review')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Plugin Rating',
                'verbose_name_plural': 'Plugin Ratings',
            },
        ),
        migrations.CreateModel(
            name='PluginUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('initialize', 'Initialize'), ('process_audio', 'Process Audio'), ('generate_content', 'Generate Content'), ('access_data', 'Access Data'), ('modify_settings', 'Modify Settings')], max_length=50, verbose_name='Action Type')),
                ('accessed_data', models.JSONField(default=list, verbose_name='Accessed Data Types')),
                ('performance_metrics', models.JSONField(default=dict, verbose_name='Performance Metrics')),
                ('error_log', models.TextField(blank=True, verbose_name='Error Log')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
            ],
            options={
                'verbose_name': 'Plugin Usage Log',
                'verbose_name_plural': 'Plugin Usage Logs',
            },
        ),
        migrations.CreateModel(
            name='SurveyResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('interest_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Interest Level')),
                ('importance_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Importance Level')),
                ('feedback', models.TextField(blank=True, verbose_name='Feedback')),
                ('would_use', models.BooleanField(verbose_name='Would Use Feature')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, verbose_name='Submitted At')),
            ],
            options={
                'verbose_name': 'Survey Response',
                'verbose_name_plural': 'Survey Responses',
            },
        ),
        migrations.CreateModel(
            name='VREnvironmentConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('name', models.CharField(max_length=100, verbose_name='Environment Name')),
                ('environment_name', models.CharField(max_length=100, verbose_name='Environment Name')),
                ('scene_type', models.CharField(choices=[('studio', 'Recording Studio'), ('concert_hall', 'Concert Hall'), ('nature', 'Nature Scene'), ('abstract', 'Abstract Space')], max_length=50, verbose_name='Scene Type')),
                ('lighting_preset', models.CharField(max_length=50, verbose_name='Lighting Preset')),
                ('ambient_audio', models.CharField(blank=True, max_length=100, verbose_name='Ambient Audio')),
                ('interaction_mode', models.CharField(choices=[('gesture', 'Gesture Control'), ('controller', 'VR Controller'), ('hybrid', 'Hybrid Control')], max_length=50, verbose_name='Interaction Mode')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'VR Environment Config',
                'verbose_name_plural': 'VR Environment Configs',
            },
        ),
        migrations.CreateModel(
            name='WearableDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('device_name', models.CharField(max_length=100, verbose_name='Device Name')),
                ('device_id', models.CharField(max_length=100, unique=True, verbose_name='Device ID')),
                ('device_type', models.CharField(choices=[('smartwatch', 'Smartwatch'), ('fitness_tracker', 'Fitness Tracker'), ('ar_glasses', 'AR Glasses'), ('other', 'Other')], max_length=50, verbose_name='Device Type')),
                ('connection_status', models.CharField(choices=[('connected', 'Connected'), ('disconnected', 'Disconnected'), ('pairing', 'Pairing'), ('error', 'Error')], default='disconnected', max_length=20, verbose_name='Connection Status')),
                ('last_sync', models.DateTimeField(blank=True, null=True, verbose_name='Last Sync')),
                ('settings', models.JSONField(default=dict, verbose_name='Device Settings')),
            ],
            options={
                'verbose_name': 'Wearable Device',
                'verbose_name_plural': 'Wearable Devices',
                'indexes': [models.Index(fields=['user_id', 'connection_status'], name='idx_wearable_status')],
            },
        ),
        migrations.CreateModel(
            name='VRSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
                ('start_time', models.DateTimeField(verbose_name='Start Time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='End Time')),
                ('duration', models.IntegerField(blank=True, null=True, verbose_name='Duration in seconds')),
                ('device_type', models.CharField(max_length=100, verbose_name='VR Device Type')),
                ('performance_metrics', models.JSONField(default=dict, verbose_name='Performance Metrics')),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='future_capabilities.vrenvironmentconfig', verbose_name='Environment Config')),
            ],
            options={
                'verbose_name': 'VR Session',
                'verbose_name_plural': 'VR Sessions',
            },
        ),
        migrations.CreateModel(
            name='VRInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('grab', 'Grab Object'), ('point', 'Point'), ('menu', 'Menu Interaction'), ('instrument', 'Instrument Control')], max_length=50, verbose_name='Interaction Type')),
                ('target_object', models.CharField(max_length=100, verbose_name='Target Object')),
                ('position_data', models.JSONField(default=dict, verbose_name='Position Data')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='future_capabilities.vrsession', verbose_name='VR Session')),
            ],
            options={
                'verbose_name': 'VR Interaction',
                'verbose_name_plural': 'VR Interactions',
            },
        ),
        migrations.AddIndex(
            model_name='vrenvironmentconfig',
            index=models.Index(fields=['user_id'], name='idx_vr_config_user'),
        ),
        migrations.AddField(
            model_name='surveyresponse',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='future_capabilities.featuresurvey', verbose_name='Survey'),
        ),
        migrations.AddField(
            model_name='pluginusagelog',
            name='installation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='future_capabilities.plugininstallation', verbose_name='Installation'),
        ),
        migrations.AddField(
            model_name='pluginrating',
            name='plugin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='future_capabilities.plugin', verbose_name='Plugin'),
        ),
        migrations.AddField(
            model_name='plugininstallation',
            name='plugin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installations', to='future_capabilities.plugin', verbose_name='Plugin'),
        ),
        migrations.AddIndex(
            model_name='plugindeveloper',
            index=models.Index(fields=['user_id'], name='idx_developer_user'),
        ),
        migrations.AddField(
            model_name='plugin',
            name='developer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plugins', to='future_capabilities.plugindeveloper', verbose_name='Developer'),
        ),
        migrations.AddField(
            model_name='neuralsignal',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signals', to='future_capabilities.neuraldevice', verbose_name='Device'),
        ),
        migrations.AddIndex(
            model_name='neuraldevice',
            index=models.Index(fields=['user_id', 'connection_status'], name='idx_neural_device_status'),
        ),
        migrations.AddIndex(
            model_name='neuralcontrol',
            index=models.Index(fields=['user_id', 'is_active'], name='idx_control_user_status'),
        ),
        migrations.AlterUniqueTogether(
            name='neuralcontrol',
            unique_together={('user_id', 'name')},
        ),
        migrations.AddIndex(
            model_name='featureusageanalytics',
            index=models.Index(fields=['feature_category', 'timestamp'], name='idx_analytics_cat_time'),
        ),
        migrations.AddIndex(
            model_name='featureusageanalytics',
            index=models.Index(fields=['user_id', 'feature_name'], name='idx_analytics_user_feature'),
        ),
        migrations.AddIndex(
            model_name='featuresurvey',
            index=models.Index(fields=['feature_category', 'is_active'], name='idx_survey_cat_status'),
        ),
        migrations.AddField(
            model_name='biofeedbackevent',
            name='trigger_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='triggered_events', to='future_capabilities.biofeedbackdata', verbose_name='Trigger Data'),
        ),
        migrations.AddField(
            model_name='biofeedbackdata',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biofeedback_data', to='future_capabilities.wearabledevice', verbose_name='Device'),
        ),
        migrations.AddIndex(
            model_name='vrsession',
            index=models.Index(fields=['user_id', 'start_time'], name='idx_vr_session_user_time'),
        ),
        migrations.AddIndex(
            model_name='vrinteraction',
            index=models.Index(fields=['session', 'interaction_type'], name='idx_vr_interaction_type'),
        ),
        migrations.AddIndex(
            model_name='surveyresponse',
            index=models.Index(fields=['survey', 'interest_level'], name='idx_response_survey_interest'),
        ),
        migrations.AlterUniqueTogether(
            name='surveyresponse',
            unique_together={('user_id', 'survey')},
        ),
        migrations.AddIndex(
            model_name='pluginusagelog',
            index=models.Index(fields=['installation', 'action_type'], name='idx_usage_install_action'),
        ),
        migrations.AddIndex(
            model_name='pluginusagelog',
            index=models.Index(fields=['timestamp'], name='idx_usage_time'),
        ),
        migrations.AddIndex(
            model_name='pluginrating',
            index=models.Index(fields=['plugin', 'rating'], name='idx_rating_plugin_score'),
        ),
        migrations.AlterUniqueTogether(
            name='pluginrating',
            unique_together={('user_id', 'plugin')},
        ),
        migrations.AddIndex(
            model_name='plugininstallation',
            index=models.Index(fields=['user_id', 'is_enabled'], name='idx_install_user_status'),
        ),
        migrations.AlterUniqueTogether(
            name='plugininstallation',
            unique_together={('user_id', 'plugin')},
        ),
        migrations.AddIndex(
            model_name='plugin',
            index=models.Index(fields=['type', 'is_certified'], name='idx_plugin_type_cert'),
        ),
        migrations.AlterUniqueTogether(
            name='plugin',
            unique_together={('developer', 'name', 'version')},
        ),
        migrations.AddIndex(
            model_name='neuralsignal',
            index=models.Index(fields=['device', 'signal_type', 'timestamp'], name='idx_signal_type_time'),
        ),
        migrations.AddIndex(
            model_name='biofeedbackevent',
            index=models.Index(fields=['user_id', 'event_type'], name='idx_biofeedback_event_type'),
        ),
        migrations.AddIndex(
            model_name='biofeedbackdata',
            index=models.Index(fields=['user_id', 'data_type', 'timestamp'], name='idx_biofeedback_type_time'),
        ),
    ]
