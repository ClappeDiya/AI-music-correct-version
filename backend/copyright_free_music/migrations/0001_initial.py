# Generated by Django 4.2.9 on 2025-02-12 17:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BrandedCatalog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('catalog_name', models.TextField(help_text='Name of the branded catalog.', verbose_name='Catalog Name')),
                ('branding_details', models.JSONField(blank=True, help_text='JSON object containing branding details (e.g., logo_url, color_scheme, description).', null=True, verbose_name='Branding Details')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the branded catalog was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Branded Catalog',
                'verbose_name_plural': 'Branded Catalogs',
            },
        ),
        migrations.CreateModel(
            name='LicenseTerm',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('license_name', models.TextField(help_text='Name of the license (e.g., CC-BY, CC0).', unique=True, verbose_name='License Name')),
                ('description', models.TextField(blank=True, help_text='Description of the license terms.', null=True, verbose_name='Description')),
                ('base_conditions', models.JSONField(blank=True, help_text='JSON object containing base conditions (e.g., attribution_required, commercial_use).', null=True, verbose_name='Base Conditions')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the license term was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'License Term',
                'verbose_name_plural': 'License Terms',
            },
        ),
        migrations.CreateModel(
            name='PaymentProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('provider_name', models.TextField(help_text='Name of the payment provider (e.g., Stripe, PayPal).', unique=True, verbose_name='Provider Name')),
                ('provider_details', models.JSONField(blank=True, help_text='JSON object containing provider details (e.g., API key, supported currencies).', null=True, verbose_name='Provider Details')),
                ('active', models.BooleanField(default=True, help_text='Indicates if the payment provider is active.', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the payment provider was created.', verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Payment Provider',
                'verbose_name_plural': 'Payment Providers',
            },
        ),
        migrations.CreateModel(
            name='RegionalLegalFramework',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('region_code', models.TextField(help_text='Code of the region (e.g., EU, US, ASIA).', verbose_name='Region Code')),
                ('legal_conditions', models.JSONField(blank=True, help_text='JSON object containing legal conditions (e.g., commercial_use_restrictions, reporting_interval).', null=True, verbose_name='Legal Conditions')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of when the legal framework was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Regional Legal Framework',
                'verbose_name_plural': 'Regional Legal Frameworks',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.TextField(help_text='Title of the track.', verbose_name='Title')),
                ('file_url', models.TextField(help_text='URL of the audio file in storage.', verbose_name='File URL')),
                ('pricing', models.JSONField(blank=True, help_text='JSON object containing pricing details (e.g., price, currency, royalty_percentage).', null=True, verbose_name='Pricing')),
                ('metadata', models.JSONField(blank=True, help_text='JSON object containing track metadata (e.g., composer, genre, duration).', null=True, verbose_name='Metadata')),
                ('published_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the track was published.', verbose_name='Published At')),
                ('license', models.ForeignKey(help_text='License terms for the track.', on_delete=django.db.models.deletion.RESTRICT, to='copyright_free_music.licenseterm', verbose_name='License')),
                ('user', models.ForeignKey(help_text='User who uploaded the track.', on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Track',
                'verbose_name_plural': 'Tracks',
            },
        ),
        migrations.CreateModel(
            name='TrackPurchase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount paid for the track.', max_digits=10, verbose_name='Amount')),
                ('purchased_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the track was purchased.', verbose_name='Purchased At')),
                ('buyer', models.ForeignKey(help_text='User who purchased the track.', on_delete=django.db.models.deletion.CASCADE, related_name='track_purchases', to=settings.AUTH_USER_MODEL, verbose_name='Buyer')),
                ('payment_provider', models.ForeignKey(blank=True, help_text='Payment provider used for the purchase.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='copyright_free_music.paymentprovider', verbose_name='Payment Provider')),
                ('track', models.ForeignKey(help_text='Track that was purchased.', on_delete=django.db.models.deletion.CASCADE, related_name='track_purchases', to='copyright_free_music.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Track Purchase',
                'verbose_name_plural': 'Track Purchases',
            },
        ),
        migrations.CreateModel(
            name='TrackLicense',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('custom_conditions', models.JSONField(blank=True, help_text='JSON object containing custom license conditions (e.g., territory_restrictions, time_limited).', null=True, verbose_name='Custom Conditions')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the track license was created.', verbose_name='Created At')),
                ('track', models.ForeignKey(help_text='Track this license applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='track_licenses', to='copyright_free_music.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Track License',
                'verbose_name_plural': 'Track Licenses',
            },
        ),
        migrations.CreateModel(
            name='TrackDownload',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('downloaded_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the track was downloaded.', verbose_name='Downloaded At')),
                ('downloader', models.ForeignKey(blank=True, help_text='User who downloaded the track.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='track_downloads', to=settings.AUTH_USER_MODEL, verbose_name='Downloader')),
                ('track', models.ForeignKey(help_text='Track that was downloaded.', on_delete=django.db.models.deletion.CASCADE, related_name='track_downloads', to='copyright_free_music.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Track Download',
                'verbose_name_plural': 'Track Downloads',
            },
        ),
        migrations.CreateModel(
            name='TrackAnalytic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analytics_data', models.JSONField(blank=True, help_text='JSON object containing analytics data (e.g., plays, unique_listeners, top_countries).', null=True, verbose_name='Analytics Data')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Timestamp of when the analytics data was last updated.', verbose_name='Last Updated')),
                ('track', models.ForeignKey(help_text='Track for which analytics are stored.', on_delete=django.db.models.deletion.CASCADE, related_name='track_analytics', to='copyright_free_music.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Track Analytic',
                'verbose_name_plural': 'Track Analytics',
            },
        ),
        migrations.CreateModel(
            name='RoyaltyTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount of the royalty payout.', max_digits=10, verbose_name='Amount')),
                ('transaction_details', models.JSONField(blank=True, help_text='JSON object containing transaction details (e.g., month, total_streams, rate_per_stream).', null=True, verbose_name='Transaction Details')),
                ('processed_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the royalty transaction was processed.', verbose_name='Processed At')),
                ('track', models.ForeignKey(help_text='Track for which the royalty was paid.', on_delete=django.db.models.deletion.CASCADE, related_name='royalty_transactions', to='copyright_free_music.track', verbose_name='Track')),
                ('user', models.ForeignKey(help_text='Creator receiving the royalty.', on_delete=django.db.models.deletion.CASCADE, related_name='royalty_transactions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Royalty Transaction',
                'verbose_name_plural': 'Royalty Transactions',
            },
        ),
        migrations.CreateModel(
            name='ExternalUsageLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('source_info', models.JSONField(blank=True, help_text='JSON object containing source information (e.g., platform, video_url, timestamp).', null=True, verbose_name='Source Info')),
                ('detected_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the external usage was detected.', verbose_name='Detected At')),
                ('track', models.ForeignKey(help_text='Track for which external usage was detected.', on_delete=django.db.models.deletion.CASCADE, related_name='external_usage_logs', to='copyright_free_music.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'External Usage Log',
                'verbose_name_plural': 'External Usage Logs',
            },
        ),
        migrations.CreateModel(
            name='DynamicPricingRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ruleset', models.JSONField(blank=True, help_text='JSON object containing pricing rules (e.g., base_price, demand_factor, max_price, volume_thresholds).', null=True, verbose_name='Ruleset')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of when the pricing rule was last updated.', verbose_name='Updated At')),
                ('track', models.ForeignKey(help_text='Track to which the pricing rule applies.', on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_pricing_rules', to='copyright_free_music.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Dynamic Pricing Rule',
                'verbose_name_plural': 'Dynamic Pricing Rules',
            },
        ),
        migrations.CreateModel(
            name='ConditionalLicenseEscalation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('condition_data', models.JSONField(blank=True, help_text='JSON object containing conditions for license escalation (e.g., downloads_limit, new_terms).', null=True, verbose_name='Condition Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the license escalation was created.', verbose_name='Created At')),
                ('track', models.ForeignKey(help_text='Track for which the license escalation applies.', on_delete=django.db.models.deletion.CASCADE, related_name='conditional_license_escalations', to='copyright_free_music.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Conditional License Escalation',
                'verbose_name_plural': 'Conditional License Escalations',
            },
        ),
        migrations.CreateModel(
            name='UsageAgreement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('agreed_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the license terms were agreed to.', verbose_name='Agreed At')),
                ('agreement_details', models.JSONField(blank=True, help_text='JSON object containing a snapshot of the license conditions agreed to.', null=True, verbose_name='Agreement Details')),
                ('track', models.ForeignKey(help_text='Track for which the license was agreed to.', on_delete=django.db.models.deletion.CASCADE, related_name='usage_agreements', to='copyright_free_music.track', verbose_name='Track')),
                ('user', models.ForeignKey(help_text='User who agreed to the license terms.', on_delete=django.db.models.deletion.CASCADE, related_name='usage_agreements', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Usage Agreement',
                'verbose_name_plural': 'Usage Agreements',
                'unique_together': {('track', 'user')},
            },
        ),
        migrations.CreateModel(
            name='TrackLegalMapping',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('last_synced', models.DateTimeField(auto_now=True, help_text='Timestamp of when the track was last synced with the legal framework.', verbose_name='Last Synced')),
                ('framework', models.ForeignKey(help_text='Legal framework to which the track is mapped.', on_delete=django.db.models.deletion.CASCADE, related_name='track_legal_mappings', to='copyright_free_music.regionallegalframework', verbose_name='Framework')),
                ('track', models.ForeignKey(help_text='Track that is mapped to the legal framework.', on_delete=django.db.models.deletion.CASCADE, related_name='track_legal_mappings', to='copyright_free_music.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Track Legal Mapping',
                'verbose_name_plural': 'Track Legal Mappings',
                'unique_together': {('track', 'framework')},
            },
        ),
        migrations.CreateModel(
            name='BrandedCatalogTrack',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('featured', models.BooleanField(default=False, help_text='Indicates if the track is featured in the catalog.', verbose_name='Featured')),
                ('catalog', models.ForeignKey(help_text='Branded catalog to which the track belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='branded_catalog_tracks', to='copyright_free_music.brandedcatalog', verbose_name='Catalog')),
                ('track', models.ForeignKey(help_text='Track that belongs to the branded catalog.', on_delete=django.db.models.deletion.CASCADE, related_name='branded_catalog_tracks', to='copyright_free_music.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Branded Catalog Track',
                'verbose_name_plural': 'Branded Catalog Tracks',
                'unique_together': {('catalog', 'track')},
            },
        ),
    ]
