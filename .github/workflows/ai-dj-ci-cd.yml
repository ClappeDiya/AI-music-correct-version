name: AI DJ CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "frontend/src/components/ai-dj/**"
      - "frontend/src/hooks/UseAiDj.ts"
      - "frontend/src/lib/api/services/AiDj.ts"
      - "backend/ai_dj/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "frontend/src/components/ai-dj/**"
      - "frontend/src/hooks/UseAiDj.ts"
      - "frontend/src/lib/api/services/AiDj.ts"
      - "backend/ai_dj/**"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          cd frontend && npm ci

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SETTINGS_MODULE: backend.settings
          LLM_PROVIDER: test
          LLM_API_KEY: test_key
        run: |
          cd backend
          python -m pytest ai_dj/tests/ --cov=ai_dj --cov-report=xml

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test -- --coverage ai-dj

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Run security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      - name: Check for sensitive data exposure
        run: |
          npm install -g detect-secrets
          detect-secrets scan . --exclude-files "*.test.ts" > security-report.json

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.json

  deploy-staging:
    needs: [test, security]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and push Docker images
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/ai-dj-backend:staging ./backend
          docker build -t ${{ secrets.ECR_REGISTRY }}/ai-dj-frontend:staging ./frontend
          docker push ${{ secrets.ECR_REGISTRY }}/ai-dj-backend:staging
          docker push ${{ secrets.ECR_REGISTRY }}/ai-dj-frontend:staging

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster staging-cluster --service ai-dj-backend --force-new-deployment
          aws ecs update-service --cluster staging-cluster --service ai-dj-frontend --force-new-deployment

  deploy-production:
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and push Docker images
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/ai-dj-backend:latest ./backend
          docker build -t ${{ secrets.ECR_REGISTRY }}/ai-dj-frontend:latest ./frontend
          docker push ${{ secrets.ECR_REGISTRY }}/ai-dj-backend:latest
          docker push ${{ secrets.ECR_REGISTRY }}/ai-dj-frontend:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster production-cluster --service ai-dj-backend --force-new-deployment
          aws ecs update-service --cluster production-cluster --service ai-dj-frontend --force-new-deployment

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          python manage.py migrate ai_dj --noinput

      - name: Notify deployment status
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "AI DJ module deployment to production ${{ job.status }}\nCommit: ${{ github.sha }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
