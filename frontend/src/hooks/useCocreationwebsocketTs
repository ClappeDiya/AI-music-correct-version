import { useState, useCallback, useEffect } from 'react';
import useWebSocket, { ReadyState } from 'react-use-websocket';

interface WebSocketMessage {
  type: string;
  data: any;
}

export const useCoCreationWebSocket = (
  url: string,
  onMessage: (message: WebSocketMessage) => void
) => {
  const [messageHistory, setMessageHistory] = useState<WebSocketMessage[]>([]);
  const [connectionStatus, setConnectionStatus] = useState<string>('Connecting');

  const { sendMessage, lastMessage, readyState } = useWebSocket(url, {
    onOpen: () => setConnectionStatus('Connected'),
    onClose: () => setConnectionStatus('Disconnected'),
    onError: () => setConnectionStatus('Error'),
    shouldReconnect: (closeEvent) => true,
    reconnectAttempts: 10,
    reconnectInterval: 3000,
  });

  useEffect(() => {
    if (lastMessage !== null) {
      try {
        const parsedMessage = JSON.parse(lastMessage.data);
        setMessageHistory((prev) => [...prev, parsedMessage]);
        onMessage(parsedMessage);
      } catch (e) {
        console.error('Failed to parse WebSocket message:', e);
      }
    }
  }, [lastMessage, onMessage]);

  const sendJsonMessage = useCallback(
    (message: any) => {
      sendMessage(JSON.stringify(message));
    },
    [sendMessage]
  );

  const connectionStatusMap = {
    [ReadyState.CONNECTING]: 'Connecting',
    [ReadyState.OPEN]: 'Open',
    [ReadyState.CLOSING]: 'Closing',
    [ReadyState.CLOSED]: 'Closed',
    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',
  };

  return {
    sendMessage: sendJsonMessage,
    lastMessage,
    messageHistory,
    connectionStatus: connectionStatusMap[readyState],
    isConnected: readyState === ReadyState.OPEN,
  };
};
